import Head from "next/head";
import Navbar from "../Components/Navbar";
import ResponsiveGrid from "../Components/ResponsiveGrid";
import axios from "axios";
import Stack from "@mui/material/Stack";
import Button from "@mui/material/Button";
import { useSelector } from "react-redux";
import {
  LOAD_POST_REQUEST,
  RELOAD_POST_REQUEST,
  POST_SORT_REQUEST,
} from "@/reducers/post";
import React, { useCallback, useState, useEffect, useMemo } from "react";
import { loadPost } from "@/reducers/post";
import { loadUser } from "@/reducers/user";
import { useDispatch } from "react-redux";
import wrapper from "@/store/configureStore";
import { END } from "redux-saga";
import NoticeModal from "@/Components/NoticeModal";
import UserPage from "@/Components/UserPage";
import SideBar from "@/Components/Sidebar";


//serverside rendering
export const getServerSideProps = wrapper.getServerSideProps(
  async (context) => {
    const cookie: any = context.req ? context.req.headers.cookie : "";
    axios.defaults.headers.Cookie = "";
    if (context.req && cookie) {
      axios.defaults.headers.Cookie = cookie;
    }
    context.store.dispatch(loadPost());
    context.store.dispatch(loadUser());
    context.store.dispatch(END);
    await context.store.sagaTask.toPromise();
  }
);

export default function Home() {

  const { loadPostLoading } = useSelector((state: any) => state.post);
  const { onInfiniteScroll } = useSelector((state: any) => state.post);
  const { hasMorePost } = useSelector((state: any) => state.post);
  const { postArray } = useSelector((state: any) => state.post);
  const dispatch = useDispatch();
  const [isUserpage, setIsUserpage] = useState(false);

  useEffect(() => {
    function onScroll() {
      if (
        window.scrollY + document.documentElement.clientHeight >
        document.documentElement.scrollHeight - 350
      ) {
        if (hasMorePost && !loadPostLoading && onInfiniteScroll) {
          const lastId = postArray[postArray.length - 1].id;
          dispatch({
            type: LOAD_POST_REQUEST,
            data: lastId,
          });
        }
      }
    }
    window.addEventListener("scroll", onScroll);
    return () => {
      window.removeEventListener("scroll", onScroll);
    };
  }, [hasMorePost, loadPostLoading, dispatch, postArray, onInfiniteScroll]);

  const loadPosts = useCallback(() => {
    dispatch({
      type: RELOAD_POST_REQUEST,
    });
    dispatch(loadPost());
    setIsUserpage(false);
  }, [dispatch]);

  const filterTodayPost = useCallback(() => {
    var sortedArray = [...postArray];
    const d = new Date();
    sortedArray = sortedArray.filter(
      (post) =>
        parseInt(post.createdAt.split("-")[2].substring(0, 2), 10) -
          d.getDate() ==
        0
    );
    dispatch({
      type: POST_SORT_REQUEST,
      data: sortedArray,
    });
  }, [dispatch]);


  return (
    <>
      <Head>
        <title>Crump REF</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <div id="_service-app" style={{ height : "100vh", display:"flex", position:"relative"}}>
        
        <SideBar />

        <NoticeModal />
        <div id="frame" style={{ margin: "auto", width: "80%" }}>
          <a onClick={loadPosts}>
            <h1 id="title" style={{ cursor: "pointer" }}>
              CRUMP REFERENCE
            </h1>
          </a>
          <div style={{ marginBottom: "40px" }}>
            <Navbar setIsUserpage={setIsUserpage} />
          </div>
          <div style={{ marginBottom: "10px" }}>
            {isUserpage && <UserPage setIsUserpage={setIsUserpage} />}
          </div>
          {!isUserpage && (
            <Stack
              spacing={2}
              direction="row"
              sx={{ marginBottom: "42px", marginTop: "-20px" }}
            >
              <Button
                variant="outlined"
                size="small"
                style={{ position: "absolute", left: "11%", fontWeight: 900 }}
                onClick={filterTodayPost}
              >
                {" "}
                오늘의 게시물
              </Button>
            </Stack>
          )}

          <ResponsiveGrid setIsUserpage={setIsUserpage} />
          {loadPostLoading && (
            <div id="bottomloading">
              <span style={{ fontSize: "240%" }}> 로딩중...</span>
            </div>
          )}
        </div>
      </div>
    </>
  );
}
