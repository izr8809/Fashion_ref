{"version":3,"file":"599.js","mappings":"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","sources":["webpack://fashion_ref/./hooks/useInput.ts","webpack://fashion_ref/./pages/signup.tsx"],"sourcesContent":["import { useInput } from '@mui/base';\r\nimport { useState, useCallback } from 'react';\r\n\r\n\r\nexport default (initValue : null | string) => {\r\n  const [value, setter] = useState(initValue);\r\n  const handler : any = useCallback((e : any) => {\r\n    setter(e);\r\n  }, []);\r\n  return [value, handler, setter];\r\n};\r\n","import React, {\r\n  useCallback,\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n  ReactElement,\r\n} from \"react\";\r\nimport useInput from \"../hooks/useInput\";\r\nimport axios from \"axios\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from '@mui/material/Button';\r\n\r\ntype SignupProps = {\r\n  setModalOpen: any;\r\n};\r\n\r\nconst style = {\r\n  position: \"absolute\" as \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\nexport default function Signup({ setModalOpen }: SignupProps): ReactElement {\r\n  const API = \"http://localhost:3065/signups\";\r\n  const [email, onChangeEmail] = useInput(\"\");\r\n  const [nickname, onChangeNickname] = useInput(\"\");\r\n  const [password, onChangePassword] = useInput(\"\");\r\n  const [passwordCheck, setPasswordCheck] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(false);\r\n  const [isLoggedIn, setisLoggedIn] = useState(false);\r\n  const onChangePasswordCheck = useCallback(\r\n    (e: any) => {\r\n      setPasswordCheck(e.target.value);\r\n      setPasswordError(e.target.value !== password);\r\n    },\r\n    [password]\r\n  );\r\n\r\n  const checkEmail = (email : any) => {\r\n    let res = false;\r\n  \r\n    if (!email) {\r\n      res = false;\r\n    } else {\r\n      const check =\r\n        /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/.test(\r\n          email\r\n        );\r\n      check ? (res = true) : (res = false);\r\n    }\r\n  \r\n    return res;\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  // const modalRef = useRef<HTMLDivElement>(null);\r\n  // useEffect(() => {\r\n  //   // 이벤트 핸들러 함수\r\n  //   const handler = (event: any) => {\r\n  //     // mousedown 이벤트가 발생한 영역이 모달창이 아닐 때, 모달창 제거 처리\r\n  //     if (modalRef.current && !modalRef.current.contains(event.target)) {\r\n  //       setModalOpen(false);\r\n  //     }\r\n  //   };\r\n\r\n  //   // 이벤트 핸들러 등록\r\n  //   document.addEventListener(\"mousedown\", handler);\r\n  //   // document.addEventListener('touchstart', handler); // 모바일 대응\r\n\r\n  //   return () => {\r\n  //     // 이벤트 핸들러 해제\r\n  //     document.removeEventListener(\"mousedown\", handler);\r\n  //     // document.removeEventListener('touchstart', handler); // 모바일 대응\r\n  //   };\r\n  // }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    (e: any) => {\r\n      if (password !== passwordCheck) {\r\n        return setPasswordError(true);\r\n      }\r\n      e.preventDefault();\r\n      // if (!term) {\r\n      //   return setTermError(true);\r\n      // }\r\n      console.log(email, nickname, password);\r\n      axios\r\n        .post(\r\n          API,\r\n          // 클라이언트에서 서버로 request(요청)하며 보내주는 데이터\r\n          // 회원가입창에서 클라이언트가 입력하는 데이터\r\n          {\r\n            email: email,\r\n            name: nickname,\r\n            password: password, // 숫자, 영어 대문자, 소문자, 특수기호, 8-20자  1234567#Aaa\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              // 'Accept': 'application/json',\r\n            },\r\n          }\r\n        )\r\n        // 그러면 서버에서 클라이언트로 response(응답)으로\r\n        // {ok: true} 아니면 {ok: false}가 온다.\r\n        // .then((response) => {\r\n        //   console.log(response); // response.data로 해야?\r\n        // })\r\n        .then((result) => {\r\n          console.log(result);\r\n          console.log(\"singupDB!\");\r\n          console.log(result.data);\r\n          setisLoggedIn(true);\r\n          // window.alert('회원가입이 되었습니다! 로그인 해주세요.');\r\n          // history.replace('/login');\r\n        })\r\n        .catch((error) => {\r\n          alert(\"회원가입이 정상적으로 되지 않았습니다.\");\r\n          console.log(error);\r\n        });\r\n    },\r\n    [email, password, passwordCheck]\r\n  );\r\n\r\n  if (!isLoggedIn) {\r\n    return (\r\n      <Modal\r\n        open={true}\r\n        onClose={closeModal}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box \r\n        component=\"form\"\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={onSubmit}\r\n        sx={style}>\r\n          {/* <form onSubmit={onSubmit}> */}\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            회원가입\r\n          </Typography>\r\n            <TextField\r\n              label=\"이메일\"\r\n              name=\"user-email\"\r\n              fullWidth\r\n              type=\"email\"\r\n              value={email}\r\n              required\r\n              error={checkEmail(email)}\r\n              onChange={(e) => {\r\n                onChangeEmail(e.target.value);\r\n              }}\r\n            />\r\n            <TextField\r\n              label=\"이름\"\r\n              name=\"user-nick\"\r\n              fullWidth\r\n              value={nickname}\r\n              required\r\n              onChange={(e) => {\r\n                onChangeNickname(e.target.value);\r\n              }}\r\n            />\r\n            <TextField\r\n              label=\"비밀번호\"\r\n              fullWidth\r\n              name=\"user-password\"\r\n              type=\"password\"\r\n              value={password}\r\n              required\r\n              onChange={(e) => {\r\n                onChangePassword(e.target.value);\r\n              }}\r\n            />\r\n            <TextField\r\n              label=\"비밀번호체크\"\r\n              fullWidth\r\n              name=\"user-password-check\"\r\n              type=\"password\"\r\n              value={passwordCheck}\r\n              required\r\n              onChange={(e) => {\r\n                setPasswordCheck(e.target.value);\r\n              }}\r\n            />\r\n            {passwordError && <span>비밀번호가 일치하지 않습니다.</span>}\r\n            <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                sx={{ mt: 3, mb: 2 }}\r\n                size=\"large\"\r\n              >\r\n                회원가입\r\n              </Button>\r\n          {/* </form> */}\r\n        </Box>\r\n        {/* <Button onClick={closeModal}>닫기</Button> */}\r\n      </Modal>\r\n      // {/* <div className={\"container\"} ref={modalRef}>\r\n      //       {/* <label htmlFor=\"user-email\">이메일</label>\r\n      //       <br />\r\n      //       <input name=\"user-email\" type=\"email\" value={email} required onChange={ (e) => {onChangeEmail(e.target.value)}} /> */}\r\n      //     </TextField>\r\n      //     <div>\r\n      //       <label htmlFor=\"user-nick\">닉네임</label>\r\n      //       <br />\r\n      //       <input name=\"user-nick\" value={nickname} required onChange={(e) => {onChangeNickname(e.target.value)}} />\r\n      //     </div>\r\n      //     <div>\r\n      //       <label htmlFor=\"user-password\">비밀번호</label>\r\n      //       <br />\r\n      //       <input name=\"user-password\" type=\"password\" value={password} required onChange={(e) => {onChangePassword(e.target.value)}} />\r\n      //     </div>\r\n      //     <div>\r\n      //       <label htmlFor=\"user-password-check\">비밀번호체크</label>\r\n      //       <br />\r\n      //       <input name=\"user-password-check\" type=\"password\" value={passwordCheck} required onChange={(e) => {setPasswordCheck(e.target.value)}} />\r\n\r\n      //       {/* {passwordError && <ErrorMessage>비밀번호가 일치하지 않습니다.</ErrorMessage>} */}\r\n      //     </div>\r\n      //     {/* <div>\r\n      //       <Checkbox name=\"user-term\" checked={term} onChange={onChangeTerm}>제로초 말을 잘 들을 것을 동의합니다.</Checkbox>\r\n      //       {termError && <ErrorMessage>약관에 동의하셔야 합니다.</ErrorMessage>}\r\n      //     </div> */}\r\n      //     <div style={{ marginTop: 10 }}>\r\n      //       <button>가입하기</button>\r\n      //     </div>\r\n      //     <button className={\"close\"} onClick={closeModal}>\r\n      //         X\r\n      //     </button>\r\n      //   </div> */}\r\n      // }\r\n    );\r\n  }\r\n  return <></>;\r\n}\r\n"],"names":["useState","useCallback","initValue","value","setter","handler","e","React","useInput","axios","TextField","Typography","Modal","Box","Button","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","Signup","setModalOpen","API","email","onChangeEmail","nickname","onChangeNickname","password","onChangePassword","passwordCheck","setPasswordCheck","passwordError","setPasswordError","isLoggedIn","setisLoggedIn","onChangePasswordCheck","target","checkEmail","res","check","test","closeModal","onSubmit","preventDefault","console","log","post","name","headers","then","result","data","catch","error","alert","open","onClose","aria-labelledby","aria-describedby","component","noValidate","autoComplete","sx","variant","label","fullWidth","type","required","onChange","span","mt","mb","size"],"sourceRoot":""}