[{"C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\api\\hello.ts":"1","C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\index.tsx":"2","C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\_app.tsx":"3","C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\_document.tsx":"4","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\AlignItemsList.tsx":"5","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\LoginForm.tsx":"6","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\Navbar.tsx":"7","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\ResponsiveGrid.tsx":"8","C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\userpage.tsx":"9","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\signup.tsx":"10","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\upload.tsx":"11"},{"size":307,"mtime":1677716392716,"results":"12","hashOfConfig":"13"},{"size":2493,"mtime":1678858909752,"results":"14","hashOfConfig":"13"},{"size":179,"mtime":1678761264701,"results":"15","hashOfConfig":"13"},{"size":231,"mtime":1678761263668,"results":"16","hashOfConfig":"13"},{"size":5362,"mtime":1678862356751,"results":"17","hashOfConfig":"13"},{"size":3929,"mtime":1678855900963,"results":"18","hashOfConfig":"13"},{"size":17667,"mtime":1678855869369,"results":"19","hashOfConfig":"13"},{"size":1841,"mtime":1678840404392,"results":"20","hashOfConfig":"13"},{"size":112,"mtime":1678413553474,"results":"21","hashOfConfig":"13"},{"size":7746,"mtime":1678856425018,"results":"22","hashOfConfig":"13"},{"size":13488,"mtime":1678865678463,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8ufcd9",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\api\\hello.ts",[],[],"C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\index.tsx",["62","63"],[],"import Head from \"next/head\";\nimport Image from \"next/image\";\nimport { Inter } from \"@next/font/google\";\nimport styles from \"@/styles/Home.module.css\";\nimport Navbar from \"../Components/Navbar\";\nimport ResponsiveGrid from \"../Components/ResponsiveGrid\";\nimport axios from \"axios\";\nimport React, { useCallback, useState, useEffect,useMemo  } from \"react\";\nimport Link from \"next/link\";\n// const inter = Inter({ subsets: [\"latin\"] });\n\nexport default function Home() {\n  const [isLoggedIn, setIsLoggedIn] = React.useState(false);\n  const [posts, setPost] = useState<any[]>([]);\n  const [userId, setUserId] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n\n  const LOADAPI = `${process.env.NEXT_PUBLIC_API}/loadpost`;\n\n  const loadPost = useCallback(() => {\n    axios\n      .get(LOADAPI)\n      .then((result) => {\n        setPost(result.data);\n        // window.alert('회원가입이 되었습니다! 로그인 해주세요.');\n        // history.replace('/login');\n      })\n      .catch((error) => {\n        alert(\"로딩이 정상적으로 되지 않았습니다.\");\n        setPost([]);\n        console.log(error);\n      });\n  }, [setPost]);\n\n  useEffect(() => {\n    loadPost();\n  }, [loadPost]);\n\n  const LOGINCHECKAPI = `${process.env.NEXT_PUBLIC_API}/logincheck`;\n  useEffect(() => {\n    axios\n      .get(LOGINCHECKAPI)\n      .then((result) => {\n        if (result.data.login) {\n          setIsLoggedIn(true);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  return (\n    <>\n      <Head>\n        <title>Crump REF</title>\n        <meta name=\"description\" content=\"Generated by create next app\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      </Head>\n      <div style={{ margin: \"auto\", width: \"80%\" }}>\n        <a onClick={loadPost}>\n          <h1 id=\"title\">CRUMP REFERENCE</h1>\n        </a>\n        <div style={{ marginBottom: \"40px\" }}>\n          <Navbar\n            isLoggedIn={isLoggedIn}\n            setIsLoggedIn={setIsLoggedIn}\n            setPost={setPost}\n            userId = {userId}\n            setUserId = {setUserId}\n            userName= {userName}\n            setUserName = {setUserName}\n\n          />\n          {/* <LoginForm /> */}\n          {/* <SignupForm /> */}\n        </div>\n        <ResponsiveGrid\n          isLoggedIn={isLoggedIn}\n          setIsLoggedIn={setIsLoggedIn}\n          setPost={setPost}\n          posts={posts}\n        />\n      </div>\n    </>\n  );\n}\n","C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\_app.tsx",[],[],"C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\_document.tsx",[],[],"C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\AlignItemsList.tsx",["64"],[],"import * as React from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport { Button, CardActionArea, CardActions } from \"@mui/material\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\ntype AlignItemsListProps = {\r\n  category: string;\r\n  brand: string;\r\n  link: string;\r\n  src: string;\r\n  season: string;\r\n  reason: string;\r\n  hashtags: any[];\r\n  id: number;\r\n  setPost: any;\r\n  posts: any[];\r\n  index: number;\r\n  name: string;\r\n  setIsLoggedIn: any;\r\n  isLoggedIn: boolean;\r\n};\r\n\r\nconst category = {\r\n  상의: 1,\r\n  하의: 2,\r\n  아우터: 3,\r\n  디테일: 4,\r\n  이미지: 5,\r\n  악세사리: 6,\r\n};\r\n\r\nconst season = {\r\n  \"23SS\": 7,\r\n  \"23FW\": 8,\r\n};\r\nexport default function AlignItemsList(props: AlignItemsListProps) {\r\n  const [category, setCategory] = useState(\"\");\r\n  const [season, setSeason] = useState(\"\");\r\n\r\n  const HASHAPI = `${process.env.NEXT_PUBLIC_API}/hashtagsearch`;\r\n  const DELAPI = `${process.env.NEXT_PUBLIC_API}/deletpost/${props.id}`;\r\n  const delClick = useCallback(() => {\r\n    if (props.isLoggedIn) {\r\n      axios\r\n        .post(DELAPI, {})\r\n        .then((result) => {\r\n          const Posts = props.posts.filter((post) => post.id !== props.id);\r\n          props.setPost(Posts);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    } else {\r\n      //로그인 모달 띄우기\r\n      alert(\"로그인 해주세요\");\r\n    }\r\n  }, [DELAPI, props]);\r\n  const editClick = useCallback(() => {\r\n    alert(\"만드는 중입니다..\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setCategory(props.category);\r\n    setSeason(\"23SS\");\r\n  }, [props.category]);\r\n\r\n  const TagClick = React.useCallback((e: any, hashname: string) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    axios\r\n      .post(\r\n        HASHAPI,\r\n        {\r\n          hashtags: \"#\" + hashname,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            // 'Accept': 'application/json',\r\n          },\r\n        }\r\n      )\r\n      .then((result) => {\r\n        props.setPost(result.data);\r\n        // window.alert('회원가입이 되었습니다! 로그인 해주세요.');\r\n        // history.replace('/login');\r\n      })\r\n      .catch((error) => {\r\n        alert(\"해시태그 포함된 포스팅이 없습니다.\");\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <Card\r\n      sx={{\r\n        maxWidth: \"15\",\r\n        marginTop: \"20px\",\r\n        // borderRadius: \"24px\",\r\n        boxShadow: \"none\",\r\n      }}\r\n    >\r\n      <CardActionArea href={`${props.link}`} target=\"_blank\">\r\n        <CardMedia\r\n          component=\"img\"\r\n          height=\"400\"\r\n          image={`../${props.src}`}\r\n          alt=\"green iguana\"\r\n        />\r\n        <CardContent>\r\n          <Typography>\r\n            <span\r\n              style={{ fontWeight: 900, fontSize: \"130%\", marginBottom: \"4%\" }}\r\n            >\r\n              {props.name[0]}_{`${props.brand}`}\r\n            </span>\r\n          </Typography>\r\n\r\n          {/* <span style={{fontWeight :900, fontSize: \"100%\", marginBottom: 5}}>\r\n            참고할 부분\r\n          </span> */}\r\n          <Typography\r\n            sx={{ fontWeight: 900, marginBottom: \"1%\" }}\r\n            variant=\"subtitle2\"\r\n            color=\"text.secondary\"\r\n          >\r\n            참고할 부분\r\n          </Typography>\r\n\r\n          <Typography\r\n            sx={{ marginBottom: \"1%\" }}\r\n            variant=\"body2\"\r\n            color=\"text.secondary\"\r\n          >\r\n            {props.reason}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <div style={{ width: \"100%\", marginBottom: \"3%\" }}>\r\n          <EditIcon id=\"editicon\" onClick={editClick} />\r\n          <DeleteIcon id=\"delicon\" onClick={delClick} />\r\n        </div>\r\n        {/* <Button size=\"small\" color=\"primary\">\r\n          Share\r\n        </Button> */}\r\n        {/* <div style={{ margin: \"2px\" }}>\r\n          <div\r\n            className={`Tag${parseInt(props.season) % 10} Tag`}\r\n            style={{ display: \"inline-block\", margin: \"2px\" }}\r\n          >\r\n            <a href=\"\">#{season}</a>\r\n          </div>{\" \"}\r\n          &nbsp;\r\n        </div>\r\n        <div style={{ margin: \"2px\" }}>\r\n          <div\r\n            className={`TagCategory Tag`}\r\n            style={{ display: \"inline-block\", margin: \"2px\" }}\r\n          >\r\n            <a href=\"\">#{category}</a>\r\n          </div>{\" \"}\r\n          &nbsp;\r\n        </div> */}\r\n        {props.hashtags.map((hashtag, index) => (\r\n          <div style={{ margin: \"2px\" }} key={index}>\r\n            <div\r\n              className={`Tag${\r\n                parseInt(hashtag.PostHashtag.HashtagId) % 8\r\n              } Tag`}\r\n              style={{ display: \"inline-block\", margin: \"2px\" }}\r\n              onClick={(e) => {\r\n                TagClick(e, hashtag.name);\r\n              }}\r\n            >\r\n              <a href=\"\">#{hashtag.name}</a>\r\n            </div>{\" \"}\r\n            &nbsp;\r\n          </div>\r\n        ))}\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\LoginForm.tsx",["65"],[],"import React, { HtmlHTMLAttributes, ReactElement } from \"react\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport useInput from \"../hooks/useInput\";\r\nimport axios from \"axios\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\ntype LoginFormProps = {\r\n  setloginModalOpen: any;\r\n  setIsLoggedIn: any;\r\n  userId : string;\r\n  setUserId : any;\r\n  userName : string;\r\n  setUserName : any;\r\n};\r\nconst style = {\r\n  position: \"absolute\" as \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\nexport default function LoginForm({\r\n  setIsLoggedIn,\r\n  setloginModalOpen,\r\n  userId,\r\n  setUserId,\r\n  userName,\r\n  setUserName,\r\n}: LoginFormProps): ReactElement {\r\n  const API = `${process.env.NEXT_PUBLIC_API}/login`;\r\n  const [email, onChangeEmail] = useInput(\"\");\r\n  const [password, onChangePassword] = useInput(\"\");\r\n  const [User, setUser] = useState({\r\n    id: 0,\r\n    name: null,\r\n  });\r\n\r\n  const closeModal = () => {\r\n    setloginModalOpen(false);\r\n  };\r\n  const onSubmitForm = useCallback(\r\n    (event: any) => {\r\n      event.preventDefault();\r\n      if(email == \"\"){\r\n        alert(\"이메일을 입력해주세요\")\r\n      }\r\n      else if(password == \"\"){\r\n        alert(\"비밀번호를 입력해주세요\")\r\n      }\r\n      else{\r\n        axios\r\n        .post(\r\n          API,\r\n          // 클라이언트에서 서버로 request(요청)하며 보내주는 데이터\r\n          // 회원가입창에서 클라이언트가 입력하는 데이터\r\n          {\r\n            email: email,\r\n            password: password, // 숫자, 영어 대문자, 소문자, 특수기호, 8-20자  1234567#Aaa\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              // 'Accept': 'application/json',\r\n            },\r\n          }\r\n        )\r\n        .then((result) => {\r\n          setUser(result.data.data);\r\n          setIsLoggedIn(true);\r\n          setUserId(result.data.data.id);\r\n          setUserName(result.data.data.name);\r\n          console.log(result.data.data)\r\n          // window.alert('회원가입이 되었습니다! 로그인 해주세요.');\r\n          // history.replace('/login');\r\n        })\r\n        .catch((error) => {\r\n          alert(\"로그인 정보가 일치하지 않습니다.\");\r\n          console.log(error);\r\n        });\r\n      }\r\n      \r\n    },\r\n    [email, password, setIsLoggedIn]\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      open={true}\r\n      onClose={closeModal}\r\n      aria-labelledby=\"modal-modal-title\"\r\n      aria-describedby=\"modal-modal-description\"\r\n    >\r\n      <Box\r\n        component=\"form\"\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={onSubmitForm}\r\n        sx={style}\r\n      >\r\n        {/* <form onSubmit={onSubmit}> */}\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          로그인\r\n        </Typography>\r\n        <TextField\r\n          label=\"이메일\"\r\n          name=\"user-email\"\r\n          fullWidth\r\n          type=\"email\"\r\n          value={email}\r\n          required\r\n          variant=\"standard\"\r\n          onChange={onChangeEmail}\r\n        />\r\n        <TextField\r\n          label=\"비밀번호\"\r\n          name=\"user-nick\"\r\n          type=\"password\"\r\n          fullWidth\r\n          value={password}\r\n          required\r\n          variant=\"standard\"\r\n          onChange={onChangePassword}\r\n        />\r\n        <Button\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          sx={{ mt: 3, mb: 2 }}\r\n          size=\"large\"\r\n        >\r\n          로그인\r\n        </Button>\r\n        {/* </form> */}\r\n      </Box>\r\n    </Modal>\r\n  );\r\n}\r\n","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\Navbar.tsx",["66"],[],"import { Inter } from \"@next/font/google\";\r\nimport * as React from \"react\";\r\nimport { HtmlHTMLAttributes, ReactElement, useRef } from \"react\";\r\nimport { styled, alpha } from \"@mui/material/styles\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport axios from \"axios\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport InputBase from \"@mui/material/InputBase\";\r\nimport Badge from \"@mui/material/Badge\";\r\n// import { useNavigate  } from 'react-router-dom'; // 설치한 패키지\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport useInput from \"../hooks/useInput\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport HomeIcon from \"@mui/icons-material/Home\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\r\nimport MailIcon from \"@mui/icons-material/Mail\";\r\nimport NotificationsIcon from \"@mui/icons-material/Notifications\";\r\nimport MoreIcon from \"@mui/icons-material/MoreVert\";\r\nimport Signup from \"@/Components/signup\";\r\nimport Upload from \"@/Components/upload\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport Login from \"@/Components/LoginForm\";\r\nimport LoginForm from \"@/Components/LoginForm\";\r\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\r\n\r\nconst style: React.CSSProperties = {\r\n  background: \"#0092ff\",\r\n  padding: \"8px 0\",\r\n  margin: \"16px auto\",\r\n  height: \"54px\",\r\n};\r\nconst inter = Inter({ subsets: [\"latin\"] });\r\n\r\nconst Search = styled(\"div\")(({ theme }) => ({\r\n  position: \"relative\",\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: alpha(\"#F8F8F8\", 0.73),\r\n  \"&:hover\": {\r\n    backgroundColor: alpha(\"#F8F8F8\", 0.33),\r\n  },\r\n  marginRight: theme.spacing(2),\r\n  marginLeft: 0,\r\n  width: \"100%\",\r\n  [theme.breakpoints.up(\"sm\")]: {\r\n    marginLeft: theme.spacing(3),\r\n    width: \"auto\",\r\n  },\r\n}));\r\n\r\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\r\n  padding: theme.spacing(0, 2),\r\n  height: \"100%\",\r\n  position: \"absolute\",\r\n  pointerEvents: \"none\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: \"inherit\",\r\n  \"& .MuiInputBase-input\": {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      width: \"20ch\",\r\n    },\r\n    height: \"40%\",\r\n  },\r\n}));\r\n\r\ntype NavbarProps = {\r\n  setIsLoggedIn: any;\r\n  isLoggedIn: boolean;\r\n  setPost: any;\r\n  userId : string;\r\n  setUserId : any;\r\n  userName : string;\r\n  setUserName : any;\r\n};\r\n\r\nexport default function Navbar({\r\n  isLoggedIn,\r\n  setIsLoggedIn,\r\n  setPost,\r\n  userId,\r\n  setUserId,\r\n  userName,\r\n  setUserName\r\n}: NavbarProps): ReactElement {\r\n  // const navigate = useNavigate();\r\n  const HASHAPI = `${process.env.NEXT_PUBLIC_API}/hashtagsearch`;\r\n  const API = `${process.env.NEXT_PUBLIC_API}/loadpost`;\r\n  const [modalOpen, setModalOpen] = React.useState(false);\r\n  const [uploadModalOpen, setuploadModalOpen] = React.useState(false);\r\n  const [loginModalOpen, setloginModalOpen] = React.useState(false);\r\n  const [value, onChangeValue] = useInput(\"\");\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] =\r\n    React.useState<null | HTMLElement>(null);\r\n\r\n  const [category, setCategory] = React.useState(\"\");\r\n  const [season, setSeason] = React.useState(\"\");\r\n  const searchBar = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (searchBar.current) {\r\n      searchBar.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  const showModal = () => {\r\n    setModalOpen(true);\r\n  };\r\n  const showLoginModal = () => {\r\n    setloginModalOpen(true);\r\n  };\r\n\r\n  const showUploadModal = () => {\r\n    setuploadModalOpen(true);\r\n  };\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n  const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  };\r\n  const Logout = useCallback(() => {\r\n    const LOGOUTAPI = `${process.env.NEXT_PUBLIC_API}/logout`;\r\n    axios\r\n      .get(LOGOUTAPI)\r\n      .then((result) => {\r\n        if (result.data.message == \"ok\") setIsLoggedIn(false);\r\n        setloginModalOpen(false);\r\n      })\r\n      .catch((err) => {alert(\"서버와 연결 끊겼네요. 새로고침.!\")});\r\n  }, [setIsLoggedIn]);\r\n\r\n  const uploadClick = useCallback(() => {\r\n    if (isLoggedIn) {\r\n      setuploadModalOpen(true);\r\n    } else {\r\n      setloginModalOpen(true);\r\n    }\r\n  }, [isLoggedIn]);\r\n\r\n  const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n    setMobileMoreAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const onReady = useCallback(()=>{alert(\"준비중입니다.\")},[])\r\n\r\n  const TagSearch = React.useCallback(\r\n    (e: any) => {\r\n      // e.preventDeafult();\r\n      // e.stopPropagation();\r\n      if (value == \"\") {\r\n        axios\r\n          .get(API)\r\n          .then((result) => {\r\n            setPost(result.data);\r\n            // window.alert('회원가입이 되었습니다! 로그인 해주세요.');\r\n            // history.replace('/login');\r\n          })\r\n          .catch((error) => {\r\n            alert(\"포스팅 불러오기 정상적으로 되지 않았습니다.\");\r\n          });\r\n      } else if (value.split(\"#\").length < 2) {\r\n        alert(\"태그 앞에 #를 붙여주세요\");\r\n      } else {\r\n        let upperCaseValue = value.toUpperCase();\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        axios\r\n          .post(\r\n            HASHAPI,\r\n            {\r\n              hashtags: upperCaseValue,\r\n              category: category,\r\n              season: season,\r\n            },\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                // 'Accept': 'application/json',\r\n              },\r\n            }\r\n          )\r\n          .then((result) => {\r\n            setPost(result.data);\r\n            // window.alert('회원가입이 되었습니다! 로그인 해주세요.');\r\n            // history.replace('/login');\r\n          })\r\n          .catch((error) => {\r\n            alert(\"해시태그 포함된 포스팅이 없습니다.\");\r\n            console.log(error);\r\n          });\r\n      }\r\n    },\r\n    [value, setPost, category, season]\r\n  );\r\n\r\n  const menuId = \"primary-search-account-menu\";\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"right\",\r\n      }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"right\",\r\n      }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n      <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\r\n      <MenuItem onClick={handleMenuClose}>My account</MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  const mobileMenuId = \"primary-search-account-menu-mobile\";\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"right\",\r\n      }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"right\",\r\n      }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      <MenuItem>\r\n        <p>만드는 중입니다</p>\r\n      </MenuItem>\r\n      {/* <MenuItem>\r\n        <IconButton size=\"large\" aria-label=\"show 4 new mails\" color=\"inherit\">\r\n          <Badge badgeContent={4} color=\"error\">\r\n            <MailIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Messages</p>\r\n      </MenuItem>\r\n      <MenuItem>\r\n        <IconButton size=\"large\" color=\"inherit\">\r\n          <Badge badgeContent={17} color=\"error\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Notifications</p>\r\n      </MenuItem>\r\n      <MenuItem onClick={handleProfileMenuOpen}>\r\n        <IconButton\r\n          size=\"large\"\r\n          aria-label=\"account of current user\"\r\n          aria-controls=\"primary-search-account-menu\"\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n        >\r\n          <AccountCircle />\r\n        </IconButton>\r\n        <p>프로필</p>\r\n      </MenuItem> */}\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      {!isLoggedIn && modalOpen && (\r\n        <Signup setIsLoggedIn={setIsLoggedIn} setModalOpen={setModalOpen} \r\n        userId = {userId}\r\n        setUserId = {setUserId}\r\n        userName= {userName}\r\n        setUserName = {setUserName}/>\r\n      )}\r\n      {isLoggedIn && uploadModalOpen && (\r\n        <Upload setuploadModalOpen={setuploadModalOpen} \r\n        userId = {userId}\r\n        setUserId = {setUserId}\r\n        userName= {userName}\r\n        setUserName = {setUserName}/>\r\n      )}\r\n      {!isLoggedIn && loginModalOpen && (\r\n        <LoginForm\r\n          setIsLoggedIn={setIsLoggedIn}\r\n          setloginModalOpen={setloginModalOpen}\r\n          userId = {userId}\r\n          setUserId = {setUserId}\r\n          userName= {userName}\r\n          setUserName = {setUserName}\r\n        />\r\n      )}\r\n      <AppBar\r\n        position=\"static\"\r\n        style={{ backgroundColor: \"#FFF\", color: \"#000\" }}\r\n      >\r\n        <Toolbar>\r\n          {/* <IconButton\r\n            size=\"large\"\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            sx={{ mr: 2 }}\r\n            onClick={reloadPost}\r\n          >\r\n            <HomeIcon color=\"disabled\" />\r\n          </IconButton> */}\r\n          <Typography\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ display: { xs: \"none\", sm: \"block\" } }}\r\n          >\r\n            {/* <p>검색할 태그</p> */}\r\n          </Typography>\r\n          {/* <Search>\r\n            <StyledInputBase\r\n              onChange={(event) => {\r\n                setValue(event.target.value);\r\n              }}\r\n              placeholder=\"태그 입력\"\r\n              inputProps={{ \"aria-label\": \"search\" }}\r\n              onKeyPress={(event) => {\r\n                if (event.which == 32) alert(value);\r\n              }}\r\n            />\r\n            <SearchIconWrapper>\r\n              <SearchIcon />\r\n            </SearchIconWrapper>\r\n          </Search> */}\r\n          {/* <FormControl\r\n            variant=\"standard\"\r\n            sx={{\r\n              m: 1,\r\n              minWidth: 120,\r\n              marginBottom: \"1%\",\r\n              marginRight: \"5px\",\r\n              marginTop: \"-5px\",\r\n            }}\r\n          >\r\n            <InputLabel id=\"demo-simple-select-standard-label\">\r\n              카테고리\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-standard-label\"\r\n              id=\"demo-simple-select-standard\"\r\n              sx={{ display: \"inline-block\" }}\r\n              required\r\n              value={category}\r\n              label=\"category\"\r\n              onChange={onChangeCategory}\r\n            >\r\n              <MenuItem value={\"상의\"}>상의</MenuItem>\r\n              <MenuItem value={\"하의\"}>하의</MenuItem>\r\n              <MenuItem value={\"아우터\"}>아우터</MenuItem>\r\n              <MenuItem value={\"디테일\"}>디테일</MenuItem>\r\n              <MenuItem value={\"이미지\"}>이미지</MenuItem>\r\n              <MenuItem value={\"악세사리\"}>악세사리</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          <FormControl\r\n            variant=\"standard\"\r\n            sx={{\r\n              m: 1,\r\n              minWidth: 120,\r\n              marginBottom: \"1%\",\r\n              marginRight: \"25px\",\r\n              marginTop: \"-5px\",\r\n            }}\r\n          >\r\n            <InputLabel id=\"demo-simple-select-standard-label\">시즌</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-standard-label\"\r\n              id=\"demo-simple-select-standard\"\r\n              sx={{ display: \"inline-block\" }}\r\n              value={season}\r\n              label=\"season\"\r\n              required\r\n              onChange={onChangeSeason}\r\n            >\r\n              <MenuItem value={\"23SS\"}>23SS</MenuItem>\r\n              <MenuItem value={\"23FW\"}>23FW</MenuItem>\r\n            </Select>\r\n          </FormControl> */}\r\n          <Box sx={{ flexGrow: 1, display: { xs: \"none\", md: \"flex\" } }} />\r\n          <form\r\n            onSubmit={TagSearch}\r\n            style={{ width: \"70%\", flex: \"auto\", marginLeft: \"15%\" }}\r\n          >\r\n            <IconButton\r\n              type=\"submit\"\r\n              aria-label=\"search\"\r\n              sx={{ display: { xs: \"none\", md: \"inline-block\" } }}\r\n            >\r\n              <SearchIcon style={{ fill: \"#9A9A9A\" }} />\r\n            </IconButton>\r\n            <TextField\r\n              id=\"search-bar\"\r\n              className=\"text\"\r\n              sx={{ display: \"inline-block\", width: \"80%\" }}\r\n              value={value}\r\n              onChange={onChangeValue}\r\n              label=\"#상의 #검정\"\r\n              variant=\"outlined\"\r\n              placeholder=\"Search...\"\r\n              size=\"small\"\r\n              inputRef={searchBar}\r\n            />\r\n          </form>\r\n          <Box sx={{ flexGrow: 1, display: { xs: \"none\", md: \"flex\" } }} />\r\n\r\n          <Box sx={{ display: { xs: \"none\", md: \"flex\" } }}>\r\n            {/* <IconButton\r\n              size=\"large\"\r\n              aria-label=\"show 4 new mails\"\r\n              color=\"inherit\"\r\n            >\r\n              <Badge badgeContent={0} color=\"error\"></Badge>\r\n            </IconButton> */}\r\n            <>\r\n              <IconButton\r\n                size=\"large\"\r\n                edge=\"end\"\r\n                sx={{ marginRight: \"10px\" }}\r\n                aria-label=\"account of current user\"\r\n                aria-haspopup=\"false\"\r\n                color=\"primary\"\r\n                onClick={uploadClick}\r\n              >\r\n                <AddIcon />\r\n              </IconButton>\r\n            </>\r\n            {!isLoggedIn ? (\r\n              <>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  sx={{\r\n                    // height: \"60%\",\r\n                    width: \"40%\",\r\n                    marginRight: \"5px\",\r\n                    fontWeight: \"bold\",\r\n                    display: \"inline-block\",\r\n                  }}\r\n                  size=\"small\"\r\n                  onClick={showLoginModal}\r\n                >\r\n                  로그인\r\n                </Button>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  sx={{\r\n                    // height: \"60%\",\r\n                    width: \"40%\",\r\n                    fontWeight: \"bold\",\r\n                    display: \"inline-block\",\r\n                  }}\r\n                  onClick={showModal}\r\n                  size=\"small\"\r\n                >\r\n                  가입\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  sx={{\r\n                    // height: \"60%\",\r\n                    width: \"100%\",\r\n                    marginRight: \"5px\",\r\n                    fontWeight: \"bold\",\r\n                    display: \"inline-block\",\r\n                    whiteSpace: \"nowrap\",\r\n                  }}\r\n                  size=\"small\"\r\n                  onClick={Logout}\r\n                >\r\n                  로그아웃\r\n                </Button>\r\n                <IconButton\r\n                  size=\"large\"\r\n                  edge=\"end\"\r\n                  aria-label=\"account of current user\"\r\n                  aria-controls={menuId}\r\n                  aria-haspopup=\"true\"\r\n                  color=\"primary\"\r\n                  onClick={onReady}\r\n                >\r\n                  <AccountCircle />\r\n                </IconButton>\r\n              </>\r\n            )}\r\n\r\n            {/* <IconButton\r\n              size=\"large\"\r\n              aria-label=\"show 17 new notifications\"\r\n              color=\"inherit\"\r\n            >\r\n              <Badge badgeContent={17} color=\"error\">\r\n                <NotificationsIcon />\r\n              </Badge>\r\n            </IconButton> */}\r\n          </Box>\r\n          <Box sx={{ display: { xs: \"flex\", md: \"none\" }, float: \"right\" }}>\r\n            <IconButton\r\n              size=\"large\"\r\n              aria-label=\"show more\"\r\n              aria-controls={mobileMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleMobileMenuOpen}\r\n              color=\"primary\"\r\n            >\r\n              <MoreIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {renderMobileMenu}\r\n      {renderMenu}\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\ResponsiveGrid.tsx",[],[],"C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\userpage.tsx",[],[],"C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\signup.tsx",["67"],[],"import React, {\r\n  useCallback,\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n  ReactElement,\r\n} from \"react\";\r\nimport useInput from \"../hooks/useInput\";\r\nimport axios from \"axios\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { color } from \"@mui/system\";\r\n\r\ntype SignupProps = {\r\n  setModalOpen: any;\r\n  setIsLoggedIn: any;\r\n  userId : string;\r\n  setUserId : any;\r\n  userName : string;\r\n  setUserName : any;\r\n};\r\n\r\nconst style = {\r\n  position: \"absolute\" as \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\nexport default function Signup({\r\n  setIsLoggedIn,\r\n  setModalOpen,\r\n  userId,\r\n  setUserId,\r\n  userName,\r\n  setUserName,\r\n}: SignupProps): ReactElement {\r\n  const API = `${process.env.NEXT_PUBLIC_API}/signups`;\r\n  const [email, onChangeEmail] = useInput(\"\");\r\n  const [emailError, setEmailError] = useState(false);\r\n  const [nickname, onChangeNickname] = useInput(\"\");\r\n  const [password, onChangePassword] = useInput(\"\");\r\n  const [passwordCheck, setPasswordCheck] = useInput(\"\");\r\n  const [passwordError, setPasswordError] = useState(false);\r\n  const onChangePasswordCheck = useCallback(\r\n    (e: any) => {\r\n      setPasswordCheck(e.target.value);\r\n      setPasswordError(e.target.value !== password);\r\n    },\r\n    [password, setPasswordCheck]\r\n  );\r\n\r\n  const checkEmail = (email: any) => {\r\n    let res = false;\r\n\r\n    if (!email) {\r\n      res = false;\r\n    } else {\r\n      const check =\r\n        /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/.test(\r\n          email\r\n        );\r\n      check ? (res = true) : (res = false);\r\n    }\r\n\r\n    return res;\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const onSubmit = useCallback(\r\n    (e: any) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      if (password !== passwordCheck) {\r\n        setPasswordError(true);\r\n      } else if (!checkEmail(email)) {\r\n        setEmailError(true);\r\n      } else {\r\n        axios\r\n          .post(\r\n            API,\r\n            // 클라이언트에서 서버로 request(요청)하며 보내주는 데이터\r\n            // 회원가입창에서 클라이언트가 입력하는 데이터\r\n            {\r\n              email: email,\r\n              name: nickname,\r\n              password: password, // 숫자, 영어 대문자, 소문자, 특수기호, 8-20자  1234567#Aaa\r\n            },\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                // 'Accept': 'application/json',\r\n              },\r\n            }\r\n          )\r\n          // 그러면 서버에서 클라이언트로 response(응답)으로\r\n          // {ok: true} 아니면 {ok: false}가 온다.\r\n          // .then((response) => {\r\n          //   console.log(response); // response.data로 해야?\r\n          // })\r\n          .then((result) => {\r\n            setIsLoggedIn(true);\r\n            setUserId(result.data.userId);\r\n            setUserName(result.data.userName);\r\n            // window.alert('회원가입이 되었습니다! 로그인 해주세요.');\r\n            // history.replace('/login');\r\n          })\r\n          .catch((error) => {\r\n            if (error.response.data.message == \"already exist\") {\r\n              alert(\"이미 존재하는 이메일입니다.\");\r\n            } else {\r\n              alert(\"회원가입이 정상적으로 되지 않았습니다.\");\r\n            }\r\n          });\r\n      }\r\n      // if (!term) {\r\n      //   return setTermError(true);\r\n      // }\r\n    },\r\n    [email, password, passwordCheck, setIsLoggedIn, nickname]\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      open={true}\r\n      onClose={closeModal}\r\n      aria-labelledby=\"modal-modal-title\"\r\n      aria-describedby=\"modal-modal-description\"\r\n    >\r\n      <Box\r\n        component=\"form\"\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={onSubmit}\r\n        sx={style}\r\n      >\r\n        {/* <form onSubmit={onSubmit}> */}\r\n        <Typography component=\"h1\" variant=\"h5\" sx={{ textAlign: \"center\" }}>\r\n          회원가입\r\n        </Typography>\r\n        <TextField\r\n          label=\"이메일\"\r\n          name=\"user-email\"\r\n          sx={{ marginTop: 3 }}\r\n          fullWidth\r\n          type=\"email\"\r\n          value={email}\r\n          required\r\n          // error={checkEmail(email)}\r\n          onChange={onChangeEmail}\r\n        />\r\n        {emailError && (\r\n          <span style={{ color: \"red\" }}>Email 형식이 잘못되었습니다</span>\r\n        )}\r\n        <TextField\r\n          label=\"이름\"\r\n          name=\"user-nick\"\r\n          sx={{ marginTop: 3 }}\r\n          fullWidth\r\n          value={nickname}\r\n          required\r\n          onChange={onChangeNickname}\r\n        />\r\n        <TextField\r\n          label=\"비밀번호\"\r\n          fullWidth\r\n          name=\"user-password\"\r\n          sx={{ marginTop: 3 }}\r\n          type=\"password\"\r\n          value={password}\r\n          required\r\n          onChange={onChangePassword}\r\n        />\r\n        <TextField\r\n          label=\"비밀번호체크\"\r\n          fullWidth\r\n          name=\"user-password-check\"\r\n          sx={{ marginTop: 3 }}\r\n          type=\"password\"\r\n          value={passwordCheck}\r\n          required\r\n          onChange={setPasswordCheck}\r\n        />\r\n        {passwordError && (\r\n          <span style={{ color: \"red\" }}>비밀번호가 일치하지 않습니다</span>\r\n        )}\r\n        <Button\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          sx={{ mt: 3, mb: 2 }}\r\n          size=\"large\"\r\n        >\r\n          확인\r\n        </Button>\r\n        {/* </form> */}\r\n      </Box>\r\n      {/* <Button onClick={closeModal}>닫기</Button> */}\r\n    </Modal>\r\n    // {/* <div className={\"container\"} ref={modalRef}>\r\n    //       {/* <label htmlFor=\"user-email\">이메일</label>\r\n    //       <br />\r\n    //       <input name=\"user-email\" type=\"email\" value={email} required onChange={ (e) => {onChangeEmail(e.target.value)}} /> */}\r\n    //     </TextField>\r\n    //     <div>\r\n    //       <label htmlFor=\"user-nick\">닉네임</label>\r\n    //       <br />\r\n    //       <input name=\"user-nick\" value={nickname} required onChange={(e) => {onChangeNickname(e.target.value)}} />\r\n    //     </div>\r\n    //     <div>\r\n    //       <label htmlFor=\"user-password\">비밀번호</label>\r\n    //       <br />\r\n    //       <input name=\"user-password\" type=\"password\" value={password} required onChange={(e) => {onChangePassword(e.target.value)}} />\r\n    //     </div>\r\n    //     <div>\r\n    //       <label htmlFor=\"user-password-check\">비밀번호체크</label>\r\n    //       <br />\r\n    //       <input name=\"user-password-check\" type=\"password\" value={passwordCheck} required onChange={(e) => {setPasswordCheck(e.target.value)}} />\r\n\r\n    //       {/* {passwordError && <ErrorMessage>비밀번호가 일치하지 않습니다.</ErrorMessage>} */}\r\n    //     </div>\r\n    //     {/* <div>\r\n    //       <Checkbox name=\"user-term\" checked={term} onChange={onChangeTerm}>제로초 말을 잘 들을 것을 동의합니다.</Checkbox>\r\n    //       {termError && <ErrorMessage>약관에 동의하셔야 합니다.</ErrorMessage>}\r\n    //     </div> */}\r\n    //     <div style={{ marginTop: 10 }}>\r\n    //       <button>가입하기</button>\r\n    //     </div>\r\n    //     <button className={\"close\"} onClick={closeModal}>\r\n    //         X\r\n    //     </button>\r\n    //   </div> */}\r\n    // }\r\n  );\r\n}\r\n","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\upload.tsx",["68"],[],{"ruleId":"69","severity":1,"message":"70","line":33,"column":6,"nodeType":"71","endLine":33,"endColumn":15,"suggestions":"72"},{"ruleId":"69","severity":1,"message":"73","line":51,"column":6,"nodeType":"71","endLine":51,"endColumn":8,"suggestions":"74"},{"ruleId":"69","severity":1,"message":"75","line":99,"column":6,"nodeType":"71","endLine":99,"endColumn":8,"suggestions":"76"},{"ruleId":"69","severity":1,"message":"77","line":91,"column":5,"nodeType":"71","endLine":91,"endColumn":37,"suggestions":"78"},{"ruleId":"69","severity":1,"message":"79","line":222,"column":5,"nodeType":"71","endLine":222,"endColumn":39,"suggestions":"80"},{"ruleId":"69","severity":1,"message":"77","line":130,"column":5,"nodeType":"71","endLine":130,"endColumn":62,"suggestions":"81"},{"ruleId":"69","severity":1,"message":"82","line":184,"column":6,"nodeType":"71","endLine":184,"endColumn":20,"suggestions":"83"},"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'LOADAPI'. Either include it or remove the dependency array.","ArrayExpression",["84"],"React Hook useEffect has a missing dependency: 'LOGINCHECKAPI'. Either include it or remove the dependency array.",["85"],"React Hook React.useCallback has missing dependencies: 'HASHAPI' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside React.useCallback.",["86"],"React Hook useCallback has missing dependencies: 'API', 'setUserId', and 'setUserName'. Either include them or remove the dependency array. If 'setUserId' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["87"],"React Hook React.useCallback has missing dependencies: 'API' and 'HASHAPI'. Either include them or remove the dependency array.",["88"],["89"],"React Hook useEffect has missing dependencies: 'USERINFOAPI' and 'props.userName'. Either include them or remove the dependency array.",["90"],{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},"Update the dependencies array to be: [LOADAPI]",{"range":"105","text":"106"},"Update the dependencies array to be: [LOGINCHECKAPI]",{"range":"107","text":"108"},"Update the dependencies array to be: [HASHAPI, props]",{"range":"109","text":"110"},"Update the dependencies array to be: [API, email, password, setIsLoggedIn, setUserId, setUserName]",{"range":"111","text":"112"},"Update the dependencies array to be: [value, API, setPost, HASHAPI, category, season]",{"range":"113","text":"114"},"Update the dependencies array to be: [password, passwordCheck, email, API, nickname, setIsLoggedIn, setUserId, setUserName]",{"range":"115","text":"116"},"Update the dependencies array to be: [USERINFOAPI, props.userId, props.userName]",{"range":"117","text":"118"},[1082,1091],"[LOADAPI]",[1453,1455],"[LOGINCHECKAPI]",[2507,2509],"[HASHAPI, props]",[2447,2479],"[API, email, password, setIsLoggedIn, setUserId, setUserName]",[6872,6906],"[value, API, setPost, HASHAPI, category, season]",[3573,3630],"[password, passwordCheck, email, API, nickname, setIsLoggedIn, setUserId, setUserName]",[5123,5137],"[USERINFOAPI, props.userId, props.userName]"]