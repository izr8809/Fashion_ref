[{"C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\api\\hello.ts":"1","C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\index.tsx":"2","C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\userpage.tsx":"3","C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\_app.tsx":"4","C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\_document.tsx":"5","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\Cardpost.tsx":"6","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\LoginForm.tsx":"7","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\Navbar.tsx":"8","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\NoticeModal.tsx":"9","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\ResponsiveGrid.tsx":"10","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\Searchbar.tsx":"11","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\signup.tsx":"12","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\upload.tsx":"13","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\UserPage.tsx":"14","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\Signup.tsx":"15","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\Upload.tsx":"16"},{"size":307,"mtime":1680739495126,"results":"17","hashOfConfig":"18"},{"size":5190,"mtime":1680739916628,"results":"19","hashOfConfig":"18"},{"size":112,"mtime":1680739495127,"results":"20","hashOfConfig":"18"},{"size":314,"mtime":1680739495125,"results":"21","hashOfConfig":"18"},{"size":231,"mtime":1680739495126,"results":"22","hashOfConfig":"18"},{"size":14223,"mtime":1680739494390,"results":"23","hashOfConfig":"18"},{"size":3532,"mtime":1680739494390,"results":"24","hashOfConfig":"18"},{"size":12805,"mtime":1680739494391,"results":"25","hashOfConfig":"18"},{"size":2344,"mtime":1680739494391,"results":"26","hashOfConfig":"18"},{"size":2436,"mtime":1680739494392,"results":"27","hashOfConfig":"18"},{"size":2238,"mtime":1680739494392,"results":"28","hashOfConfig":"18"},{"size":7315,"mtime":1680739494393,"results":"29","hashOfConfig":"18"},{"size":21791,"mtime":1680739494393,"results":"30","hashOfConfig":"18"},{"size":2512,"mtime":1680739807976,"results":"31","hashOfConfig":"18"},{"size":7315,"mtime":1680740213668,"results":"32","hashOfConfig":"18"},{"size":21791,"mtime":1680739494393,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8ufcd9",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\api\\hello.ts",[],[],"C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\index.tsx",["88"],[],"import Head from \"next/head\";\nimport { Inter } from \"@next/font/google\";\nimport styles from \"@/styles/Home.module.css\";\nimport Navbar from \"../Components/Navbar\";\nimport ResponsiveGrid from \"../Components/ResponsiveGrid\";\nimport axios, { AxiosHeaders } from \"axios\";\nimport Stack from \"@mui/material/Stack\";\nimport Button from \"@mui/material/Button\";\nimport { useSelector } from \"react-redux\";\nimport {\n  initialState as postinitialState,\n  LOAD_POST_REQUEST,\n  RELOAD_POST_REQUEST,\n  POST_SORT_REQUEST,\n} from \"@/reducers/post\";\nimport React, { useCallback, useState, useEffect, useMemo } from \"react\";\nimport { loadPost } from \"@/reducers/post\";\nimport { loadUser } from \"@/reducers/user\";\nimport { useDispatch } from \"react-redux\";\nimport wrapper from \"@/store/configureStore\";\nimport { END } from \"redux-saga\";\nimport userpage from \"./userpage\";\nimport NoticeModal from \"@/Components/NoticeModal\";\nimport UserPage from \"@/Components/UserPage\";\n\nexport const getServerSideProps = wrapper.getServerSideProps(\n  async (context) => {\n    const cookie: any = context.req ? context.req.headers.cookie : \"\";\n    axios.defaults.headers.Cookie = \"\";\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch(loadPost());\n    context.store.dispatch(loadUser());\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  }\n);\n\nexport default function Home() {\n  // const [isLoggedIn, setIsLoggedIn] = React.useState(false);\n\n  const { user } = useSelector((state: any) => state.user);\n  const { loadPostLoading } = useSelector((state: any) => state.post);\n  const { onInfiniteScroll } = useSelector((state: any) => state.post);\n  const { hasMorePost } = useSelector((state: any) => state.post);\n  const { postArray } = useSelector((state: any) => state.post);\n  const dispatch = useDispatch();\n  const [isUserpage, setIsUserpage] = useState(false);\n\n  useEffect(() => {\n    function onScroll() {\n      if (\n        window.scrollY + document.documentElement.clientHeight >\n        document.documentElement.scrollHeight - 350\n      ) {\n        if (hasMorePost && !loadPostLoading && onInfiniteScroll) {\n          const lastId = postArray[postArray.length - 1].id;\n          dispatch({\n            type: LOAD_POST_REQUEST,\n            data: lastId,\n          });\n        }\n      }\n    }\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePost, loadPostLoading, dispatch, postArray, onInfiniteScroll]);\n\n  const loadPosts = useCallback(() => {\n    dispatch({\n      type: RELOAD_POST_REQUEST,\n    });\n    dispatch(loadPost());\n    setIsUserpage(false);\n  }, [dispatch]);\n\n  \n  const filterTodayPost = useCallback(() => {\n    \n    var sortedArray = [...postArray];\n    const d = new Date();\n    sortedArray = sortedArray.filter((post) => post.createdAt - Date.now() == 0)\n    dispatch({\n      type: POST_SORT_REQUEST,\n      data: sortedArray,\n    });\n\n  }, [dispatch]);\n\n\n  const onReady = () => {\n    alert(\"준비중!\")\n  };\n\n  return (\n    <>\n      <Head>\n        <title>Crump REF</title>\n        <meta name=\"description\" content=\"Generated by create next app\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      </Head>\n\n      <NoticeModal />\n      <div style={{ margin: \"auto\", width: \"80%\" }}>\n        <a onClick={loadPosts}>\n          <h1 id=\"title\" style={{ cursor: \"pointer\" }}>\n            CRUMP REFERENCE\n          </h1>\n        </a>\n        <div style={{ marginBottom: \"40px\" }}>\n          <Navbar setIsUserpage={setIsUserpage} />\n        </div>\n        <div style={{ marginBottom: \"10px\" }}>\n          {isUserpage && <UserPage />}\n        </div>\n        { !isUserpage &&\n        <Stack spacing={2} direction=\"row\" sx={{marginBottom:\"42px\", marginTop :\"-20px\"}}>\n          {/* <Button\n            variant=\"outlined\"\n            size=\"small\"\n            style={{ position: \"absolute\", left: \"11%\", fontWeight: 900 }}\n            onClick={loadPost}\n          >\n            {\" \"}\n            최신 순\n          </Button> */}\n          <Button\n            variant=\"outlined\"\n            size=\"small\"\n            style={{ position: \"absolute\", left: \"11%\", fontWeight: 900 }}\n            onClick={filterTodayPost}\n          >\n            {\" \"}\n            오늘의 게시물\n          </Button>\n          {/* <Button\n            variant=\"outlined\"\n            size=\"small\"\n            style={{ position: \"absolute\", left: \"17%\", fontWeight: 900 }}\n            onClick={onReady}\n          >\n            {\" \"}\n            좋아요 순{\" \"}\n          </Button> */}\n        </Stack>\n        }\n        \n        <ResponsiveGrid setIsUserpage={setIsUserpage} />\n        {/* <div>\n          <Stack spacing={2} sx={{alignItems:\"center\", marginTop:\"30px\", marginBottom:\"50px\"}}>\n            <Pagination page={page} count={count} color=\"primary\" onChange={handleChange}/>\n          </Stack>\n        </div> */}\n        {loadPostLoading && (\n          <div id=\"bottomloading\">\n            <span style={{ fontSize: \"240%\" }}> 로딩중...</span>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n","C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\userpage.tsx",[],[],"C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\_app.tsx",[],[],"C:\\Users\\User\\Fashion_ref\\fashion_ref\\pages\\_document.tsx",[],[],"C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\Cardpost.tsx",["89"],[],"import * as React from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport { experimentalStyled as styled } from \"@mui/material/styles\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport { Button, CardActionArea, CardActions } from \"@mui/material\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Box from \"@mui/material/Box\";\r\nimport FileCopyIcon from \"@mui/icons-material/FileCopy\";\r\nimport ArrowRightIcon from '@mui/icons-material/ArrowRight';\r\nimport ArrowLeftIcon from '@mui/icons-material/ArrowLeft';\r\nimport Brightness1RoundedIcon from '@mui/icons-material/Brightness1Rounded';\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  DELETE_POST_REQUEST,\r\n  DUPLICATE_POST_REQUEST,\r\n  HASHTAG_SEARCH_REQUEST,\r\n  LIKE_POST_REQUEST,\r\n  loadPost,\r\n  TOGGLE_ISEDIT_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n} from \"@/reducers/post\";\r\nimport FavoriteBorderTwoToneIcon from \"@mui/icons-material/FavoriteBorderTwoTone\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport Upload from \"./Upload\";\r\n\r\ntype CardpostProps = {\r\n  index: number;\r\n  setIsUserpage:any;\r\n  // posts: any[];\r\n  category: string;\r\n  id: number;\r\n  brand: string;\r\n  link: string;\r\n  Images: {\r\n    src: string;\r\n  }[];\r\n  season: string;\r\n  reason: string;\r\n  name: string;\r\n  hashtags: {\r\n    PostHashtag: {\r\n      HashtagId: number;\r\n    };\r\n    name: string;\r\n  }[];\r\n  likers: any[];\r\n};\r\nconst style = {\r\n  position: \"absolute\" as \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nconst StyledCardAction = styled(CardActions)`\r\n  display: flex;\r\n  -webkit-box-align: center;\r\n  align-items: center;\r\n  padding: 8px;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport default function Cardpost(props: CardpostProps) {\r\n  const { logInDone } = useSelector((state: any) => state.user);\r\n  const { user } = useSelector((state: any) => state.user);\r\n  const { postArray } = useSelector((state: any) => state.post);\r\n  const dispatch = useDispatch();\r\n  // const isLoggedIn = false;\r\n  const [uploadModalClicked, setUploadModalClicked] = useState(false);\r\n  const [like, setLike] = useState(false);\r\n  const {isEdit} = useSelector((state: any) => state.post);\r\n  const [likeClick, setLikeClick] = useState(props.likers?.length || 0);\r\n  const [loginModalOpen, setIsLoginFormOpen] = useState(false);\r\n  const [isUploadFormOpen, setIsUploadFormOpen] = useState(false);\r\n  const [imageIndex, setImageIndex] = useState(0);\r\n\r\n  const [modalOpen, setModalOpen] = React.useState(false);\r\n  const [ImagePath, setImagePath] = React.useState(\"\");\r\n\r\n  const closeModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const onToggleLike = useCallback(() => {\r\n    if (user) {\r\n      setLike((prev) => !prev);\r\n\r\n      if (!like) {\r\n        dispatch({\r\n          type: LIKE_POST_REQUEST,\r\n          data: props.id,\r\n        });\r\n        setLikeClick((prev) => prev + 1);\r\n      } else {\r\n        dispatch({\r\n          type: UNLIKE_POST_REQUEST,\r\n          data: props.id,\r\n        });\r\n        setLikeClick((prev) => prev - 1);\r\n      }\r\n    } else {\r\n      alert(\"로그인 해주세요\");\r\n      setIsLoginFormOpen(true);\r\n      //로그인 모달 띄우기 넣어야\r\n    }\r\n  }, [user, like, props.id]);\r\n\r\n  const delClick = useCallback(() => {\r\n    if (user) {\r\n      setModalOpen(true);\r\n    } else {\r\n      alert(\"로그인 해주세요\");\r\n      setIsLoginFormOpen(true);\r\n      //로그인 모달 띄우기 넣어야\r\n    }\r\n  }, [user]);\r\n\r\n  const duplicateClick = useCallback(() => {\r\n    if (!user) {\r\n      return alert(\"로그인이 필요합니다.\");\r\n    }\r\n\r\n    return dispatch({\r\n      type: DUPLICATE_POST_REQUEST,\r\n      data: props.id,\r\n    });\r\n  }, [dispatch, props.id, user]);\r\n\r\n  const onSubmit = useCallback(\r\n    (e: any) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      if (!user) {\r\n        return alert(\"로그인이 필요합니다.\");\r\n      }\r\n\r\n      return dispatch({\r\n        type: DELETE_POST_REQUEST,\r\n        data: props.id,\r\n      });\r\n    },\r\n    [dispatch, props.id, user]\r\n  );\r\n\r\n  const editClick = () => {\r\n    if (!user) {\r\n      return alert(\"로그인이 필요합니다.\");\r\n    }\r\n    setIsUploadFormOpen(true);\r\n    if(!isEdit){\r\n      dispatch({\r\n        type: TOGGLE_ISEDIT_REQUEST,\r\n        data : true,\r\n      })\r\n    }\r\n\r\n    // alert(\"준비중입니다.\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.Images[imageIndex] == undefined) {\r\n    } else {\r\n      // console.log(\"props\")\r\n      // console.log(props)\r\n      setImagePath(`../${props.Images[imageIndex].src}`);\r\n    }\r\n  }, [props.Images,imageIndex]);\r\n\r\n  const onClickRightArrow = useCallback(()=>{\r\n    if(imageIndex < props.Images.length){\r\n      setImageIndex((prev)=> prev+1)\r\n    }\r\n  },[props.Images, imageIndex])\r\n  \r\n  const onClickLeftArrow = useCallback(()=>{\r\n    if(imageIndex > 0){\r\n      setImageIndex((prev)=> prev-1)\r\n    }\r\n  },[imageIndex])\r\n\r\n\r\n  const TagClick = React.useCallback(\r\n    (e: any, hashname: string) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      dispatch({\r\n        type: HASHTAG_SEARCH_REQUEST,\r\n        data: {\r\n          hashtags: \"#\" + hashname,\r\n        },\r\n      });\r\n      props.setIsUserpage(false);\r\n      window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n    },\r\n    [dispatch, props]\r\n  );\r\n\r\n  useEffect(() => {\r\n    //like 눌렀는지\r\n    if (user?.data && props.likers) {\r\n      const isUserLiked = props.likers.find((v) => v.id === user?.data.id);\r\n      if (isUserLiked) setLike(true);\r\n      else setLike(false);\r\n    }\r\n  }, [props.likers, user, props.id, logInDone]);\r\n\r\n  return (\r\n    <>\r\n      {isUploadFormOpen && isEdit && (\r\n        <Upload\r\n          setUploadModalClicked ={setUploadModalClicked}\r\n          uploadModalClicked={uploadModalClicked}\r\n          setImageIndex ={setImageIndex}\r\n          setuploadModalOpen={setIsUploadFormOpen}\r\n          uploadModalOpen={isUploadFormOpen}\r\n          postId={props.id}\r\n          clipboardFile={null}\r\n        />\r\n      )}\r\n      {loginModalOpen && (\r\n        <LoginForm\r\n          loginModalOpen={loginModalOpen}\r\n          setloginModalOpen={setIsLoginFormOpen}\r\n        />\r\n      )}\r\n      {modalOpen && (\r\n        <Modal\r\n          open={true}\r\n          onClose={closeModal}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <Box\r\n            component=\"form\"\r\n            noValidate\r\n            autoComplete=\"off\"\r\n            onSubmit={onSubmit}\r\n            sx={style}\r\n          >\r\n            {/* <form onSubmit={onSubmit}> */}\r\n            <Typography\r\n              component=\"h2\"\r\n              variant=\"h5\"\r\n              sx={{ textAlign: \"center\", marginBottom: \"15px\" }}\r\n            >\r\n              정말 삭제하시겠습니까?\r\n            </Typography>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              sx={{\r\n                mt: 3,\r\n                mb: 2,\r\n                width: \"40%\",\r\n                marginLeft: \"5%\",\r\n                marginRight: \"10%\",\r\n              }}\r\n              size=\"large\"\r\n            >\r\n              삭제\r\n            </Button>\r\n\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2, width: \"40%\" }}\r\n              size=\"large\"\r\n              onClick={closeModal}\r\n            >\r\n              취소\r\n            </Button>\r\n            {/* </form> */}\r\n          </Box>\r\n          {/* <Button onClick={closeModal}>닫기</Button> */}\r\n        </Modal>\r\n      )}\r\n      <Card\r\n        sx={{\r\n          maxWidth: \"15\",\r\n          marginTop: \"20px\",\r\n          // borderRadius: \"24px\",\r\n          boxShadow: \"none\",\r\n          position: \"relative\",\r\n        }}\r\n      >\r\n        <CardActionArea href={`${props.link}`} target=\"_blank\">\r\n          <CardMedia\r\n            component=\"img\"\r\n            height=\"400\"\r\n            image={ImagePath}\r\n            // alt=\"이미지 오류, 삭제 후 다시 등록해주세요\"\r\n          />\r\n        </CardActionArea>\r\n        {props.Images && props.Images.length > 1 && (\r\n          <>\r\n            <ArrowRightIcon\r\n              onClick={onClickRightArrow}\r\n              style={{ position: \"absolute\", top: \"30%\", right: \"0%\", zIndex: 100, color:\"#3D3D3D\", cursor:\"pointer\"}}\r\n            />\r\n            <Brightness1RoundedIcon \r\n              style={{ position: \"absolute\", top: \"30%\", right: \"0%\", color:\"#B5B5B7\" }}\r\n            />\r\n            <ArrowLeftIcon\r\n              onClick={onClickLeftArrow}\r\n              style={{ position: \"absolute\", top: \"30%\", left: \"0%\", zIndex: 100, color:\"#3D3D3D\",cursor:\"pointer\" }}\r\n            />\r\n            <Brightness1RoundedIcon \r\n              style={{ position: \"absolute\", top: \"30%\", left: \"0%\", color:\"#B5B5B7\" }}\r\n            />\r\n          </>\r\n        )}\r\n\r\n        <CardContent>\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              marginBottom: \"3%\",\r\n              display: \"inline-block\",\r\n            }}\r\n          >\r\n            <FileCopyIcon\r\n              id=\"copyicon\"\r\n              onClick={duplicateClick}\r\n              sx={{\r\n                \":hover\": { opacity: \"50%\" },\r\n                cursor: \"pointer\",\r\n                marginRight: \"17px\",\r\n                opacity: \"25%\",\r\n                width: \"0.9em\",\r\n              }}\r\n            />\r\n            <EditIcon\r\n              id=\"editicon\"\r\n              onClick={editClick}\r\n              sx={{\r\n                \":hover\": { opacity: \"50%\" },\r\n                cursor: \"pointer\",\r\n                opacity: \"25%\",\r\n                width: \"0.9em\",\r\n              }}\r\n            />\r\n            <DeleteIcon\r\n              id=\"delicon\"\r\n              onClick={delClick}\r\n              sx={{\r\n                \":hover\": { opacity: \"50%\" },\r\n                cursor: \"pointer\",\r\n                marginLeft: \"17px\",\r\n                opacity: \"25%\",\r\n                width: \"0.9em\",\r\n              }}\r\n            />\r\n          </div>\r\n          <Typography>\r\n            <span\r\n              style={{\r\n                fontWeight: 900,\r\n                fontSize: \"130%\",\r\n                marginBottom: \"4%\",\r\n              }}\r\n            >\r\n              {`${props.brand}`}\r\n            </span>\r\n          </Typography>\r\n\r\n          {/* <span style={{fontWeight :900, fontSize: \"100%\", marginBottom: 5}}>\r\n            참고할 부분\r\n          </span> */}\r\n          <Typography\r\n            sx={{ fontWeight: 900, marginBottom: \"2%\" }}\r\n            variant=\"subtitle2\"\r\n            color=\"text.secondary\"\r\n          >\r\n            참고할 부분\r\n          </Typography>\r\n\r\n          <Typography\r\n            sx={{ marginBottom: \"1%\" }}\r\n            variant=\"body2\"\r\n            color=\"text.secondary\"\r\n          >\r\n            {props.reason}\r\n          </Typography>\r\n        </CardContent>\r\n        <StyledCardAction>\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              display: \"inline-block\",\r\n              marginBottom: \"5px\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                width: \"20%\",\r\n                marginBottom: \"3%\",\r\n                verticalAlign: \"center\",\r\n                display: \"inline-block\",\r\n                float: \"left\",\r\n              }}\r\n            >\r\n              {like ? (\r\n                <FavoriteIcon\r\n                  onClick={onToggleLike}\r\n                  sx={{ cursor: \"pointer\", opacity: \"80%\", color: \"#FF3040\" }}\r\n                />\r\n              ) : (\r\n                <FavoriteBorderTwoToneIcon\r\n                  onClick={onToggleLike}\r\n                  sx={{ cursor: \"pointer\", opacity: \"40%\" }}\r\n                />\r\n              )}\r\n              <span\r\n                style={{\r\n                  position: \"relative\",\r\n                  top: \"-7px\",\r\n                  marginLeft: \"5px\",\r\n                  color: \"#A6A6A6\",\r\n                }}\r\n              >\r\n                {likeClick ? likeClick : 0}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          {/* <Button size=\"small\" color=\"primary\">\r\n          Share\r\n        </Button> */}\r\n          {/* <div style={{ margin: \"2px\" }}>\r\n          <div\r\n            className={`Tag${parseInt(props.season) % 10} Tag`}\r\n            style={{ display: \"inline-block\", margin: \"2px\" }}\r\n          >\r\n            <a href=\"\">#{season}</a>\r\n          </div>{\" \"}\r\n          &nbsp;\r\n        </div>\r\n        <div style={{ margin: \"2px\" }}>\r\n          <div\r\n            className={`TagCategory Tag`}\r\n            style={{ display: \"inline-block\", margin: \"2px\" }}\r\n          >\r\n            <a href=\"\">#{category}</a>\r\n          </div>{\" \"}\r\n          &nbsp;\r\n        </div> */}\r\n          {props.hashtags.map((hashtag, index) => (\r\n            <div style={{ margin: \"2px\" }} key={index}>\r\n              <div\r\n                className={`Tag${hashtag.PostHashtag.HashtagId % 8} Tag`}\r\n                style={{ display: \"inline-block\", margin: \"2px\" }}\r\n                onClick={(e) => {\r\n                  TagClick(e, hashtag.name);\r\n                }}\r\n              >\r\n                <a href=\"\">#{hashtag.name}</a>\r\n              </div>{\" \"}\r\n              &nbsp;\r\n            </div>\r\n          ))}\r\n\r\n          <div style={{ width: \"100%\" }}>\r\n            <span\r\n              style={{\r\n                float: \"left\",\r\n                color: \"#A6A6A6\",\r\n                fontSize: \"80%\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              작성자 : {props.name}\r\n            </span>\r\n          </div>\r\n        </StyledCardAction>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\LoginForm.tsx",["90"],[],"import React, { HtmlHTMLAttributes, ReactElement } from \"react\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport useInput from \"../hooks/useInput\";\r\nimport axios from \"axios\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { LoadingButton } from '@mui/lab';\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TOGGLE_LOGIN_DONE, loginRequestAction } from \"@/reducers/user\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst style = {\r\n  position: \"absolute\" as \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\ntype LoginFormProps = {\r\n  setloginModalOpen: any;\r\n  loginModalOpen : boolean;\r\n};\r\nexport default function LoginForm({\r\n  setloginModalOpen,\r\n  loginModalOpen,\r\n}: LoginFormProps): ReactElement {\r\n  \r\n  const dispatch = useDispatch();\r\n  const [isInitialOpen, setIsInitialOpen]= useState(true);\r\n  const {logInDone} = useSelector((state : any) => state.user)\r\n  const {logInLoading} = useSelector((state : any) => state.user)\r\n  const {logInError} = useSelector((state : any) => state.user)\r\n  const [email, onChangeEmail] = useInput(\"\");\r\n  const [password, onChangePassword] = useInput(\"\");\r\n\r\n  const closeModal = () => {\r\n    setloginModalOpen(false);\r\n  };\r\n  const onSubmitForm = useCallback(\r\n    (event: any) => {\r\n      event.preventDefault();\r\n      if (email == \"\") {\r\n        alert(\"이메일을 입력해주세요\");\r\n      } else if (password == \"\") {\r\n        alert(\"비밀번호를 입력해주세요\");\r\n      } else {\r\n        dispatch(loginRequestAction({email,password}))\r\n      }\r\n    },\r\n    [email, password, dispatch]\r\n  );\r\n\r\n  useEffect(()=>{\r\n    if(logInDone && !isInitialOpen){\r\n      setloginModalOpen(false);\r\n      dispatch({\r\n        type: TOGGLE_LOGIN_DONE,\r\n      })\r\n    }\r\n    setIsInitialOpen(false);\r\n\r\n  },[logInDone])\r\n\r\n\r\n  return (\r\n    <Modal\r\n      open={true}\r\n      onClose={closeModal}\r\n      aria-labelledby=\"modal-modal-title\"\r\n      aria-describedby=\"modal-modal-description\"\r\n    >\r\n      <Box\r\n        component=\"form\"\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={onSubmitForm}\r\n        sx={style}\r\n      >\r\n        {/* <form onSubmit={onSubmit}> */}\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          로그인\r\n        </Typography>\r\n        <TextField\r\n          label=\"이메일\"\r\n          name=\"user-email\"\r\n          fullWidth\r\n          type=\"email\"\r\n          value={email}\r\n          required\r\n          variant=\"standard\"\r\n          onChange={onChangeEmail}\r\n        />\r\n        <TextField\r\n          label=\"비밀번호\"\r\n          name=\"user-nick\"\r\n          type=\"password\"\r\n          fullWidth\r\n          value={password}\r\n          required\r\n          variant=\"standard\"\r\n          onChange={onChangePassword}\r\n        />\r\n        {logInError && <span style={{marginTop:\"10px\", color:\"#F73334\"}}> 로그인 정보가 일치하지 않습니다.</span>}\r\n        <LoadingButton\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          sx={{ mt: 3, mb: 2 }}\r\n          size=\"large\"\r\n          loading={logInLoading}\r\n        >\r\n          로그인\r\n        </LoadingButton>\r\n        {/* </form> */}\r\n      </Box>\r\n    </Modal>\r\n  );\r\n}\r\n","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\Navbar.tsx",["91","92"],[],"import { Inter } from \"@next/font/google\";\r\nimport * as React from \"react\";\r\nimport { HtmlHTMLAttributes, ReactElement, useRef } from \"react\";\r\nimport { styled, alpha } from \"@mui/material/styles\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport axios from \"axios\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport InputBase from \"@mui/material/InputBase\";\r\nimport Badge from \"@mui/material/Badge\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport Button from \"@mui/material/Button\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\r\nimport MoreIcon from \"@mui/icons-material/MoreVert\";\r\nimport Signup from \"@/Components/Signup\";\r\nimport Upload from \"@/Components/Upload\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport Login from \"@/Components/LoginForm\";\r\nimport LoginForm from \"@/Components/LoginForm\";\r\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { loginRequestAction, logoutRequestAction } from \"@/reducers/user\";\r\nimport Searchbar from \"./Searchbar\";\r\nimport LoadingButton from \"@mui/lab/LoadingButton\";\r\nimport { GET_HASHTAGS_REQUEST, GET_USER_POST_REQUEST, TOGGLE_SCROLL_REQUEST } from \"@/reducers/post\";\r\n\r\nconst style: React.CSSProperties = {\r\n  background: \"#0092ff\",\r\n  padding: \"8px 0\",\r\n  margin: \"16px auto\",\r\n  height: \"54px\",\r\n};\r\n\r\nconst modalstyle = {\r\n  position: \"absolute\" as \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\n\r\ntype NavbarProps = {\r\n  setIsUserpage :any;\r\n};\r\n\r\nexport default function Navbar({\r\n  \r\n  setIsUserpage\r\n}: NavbarProps): ReactElement {\r\n\r\n  //redux\r\n  const { user } = useSelector((state: any) => state.user);\r\n  const { logOutLoading } = useSelector((state: any) => state.user);\r\n  const { hashtags } = useSelector((state: any) => state.post);\r\n  const { isEdit } = useSelector((state: any) => state.post);\r\n  const [clipboardFile, setClipboardFile] = useState(null);\r\n  const [uploadModalClicked, setUploadModalClicked] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const [uploadModalOpen, setuploadModalOpen] = React.useState(false);\r\n  const [loginModalOpen, setloginModalOpen] = React.useState(false);\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] =\r\n    React.useState<null | HTMLElement>(null);\r\n\r\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\r\n  const [showHashModalOpen, setShowHashModalOpen] = React.useState(false);\r\n\r\n\r\n  const closehashtagsModal = () => {\r\n    setShowHashModalOpen(false);\r\n  };\r\n\r\n  const showModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const showLoginModal = () => {\r\n    setloginModalOpen(true);\r\n  };\r\n\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n  const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  };\r\n  const Logout = useCallback(() => {\r\n    dispatch(logoutRequestAction());\r\n    //왜인지 모르겠는데 로그아웃 후 모달 켜짐\r\n    setloginModalOpen(false);\r\n  }, []);\r\n\r\n  const uploadClick = useCallback(() => {\r\n    if (user) {\r\n      setuploadModalOpen(true);\r\n      setUploadModalClicked(true)\r\n    } else {\r\n      setloginModalOpen(true);\r\n      // setIsEdit(true);\r\n    }\r\n  }, [user]);\r\n\r\n  const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n    setMobileMoreAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const onReady = useCallback(() => {\r\n    alert(\"준비중입니다.\");\r\n  }, []);\r\n\r\n  const getHashtags = useCallback(() => {\r\n    //dispatch\r\n    dispatch({\r\n      type: GET_HASHTAGS_REQUEST,\r\n    });\r\n    setShowHashModalOpen(true);\r\n  }, [dispatch]);\r\n\r\n  const profileClick = useCallback(()=>{\r\n    if(user){\r\n      setIsUserpage(true);\r\n      \r\n      dispatch({\r\n        type: GET_USER_POST_REQUEST,\r\n        data: null,\r\n      });\r\n      dispatch({\r\n        type: TOGGLE_SCROLL_REQUEST,\r\n      })\r\n    }else{\r\n      alert(\"준비중입니다.\");\r\n    }\r\n  },[user])\r\n\r\n\r\n  //Render Menu\r\n  const menuId = \"primary-search-account-menu\";\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"right\",\r\n      }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"right\",\r\n      }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n      <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\r\n      <MenuItem onClick={handleMenuClose}>My account</MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  const mobileMenuId = \"primary-search-account-menu-mobile\";\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"right\",\r\n      }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{\r\n        vertical: \"top\",\r\n        horizontal: \"right\",\r\n      }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      <MenuItem>\r\n        <p>만드는 중입니다</p>\r\n      </MenuItem>\r\n      {/* <MenuItem>\r\n        <IconButton size=\"large\" aria-label=\"show 4 new mails\" color=\"inherit\">\r\n          <Badge badgeContent={4} color=\"error\">\r\n            <MailIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Messages</p>\r\n      </MenuItem>\r\n      <MenuItem>\r\n        <IconButton size=\"large\" color=\"inherit\">\r\n          <Badge badgeContent={17} color=\"error\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n        <p>Notifications</p>\r\n      </MenuItem>\r\n      <MenuItem onClick={handleProfileMenuOpen}>\r\n        <IconButton\r\n          size=\"large\"\r\n          aria-label=\"account of current user\"\r\n          aria-controls=\"primary-search-account-menu\"\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n        >\r\n          <AccountCircle />\r\n        </IconButton>\r\n        <p>프로필</p>\r\n      </MenuItem> */}\r\n    </Menu>\r\n  );\r\n\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      {isModalOpen && (\r\n        <Signup\r\n          setIsModalOpen={setIsModalOpen}\r\n        />\r\n      )}\r\n      {user && uploadModalOpen && !isEdit && (\r\n        <Upload\r\n          uploadModalClicked={uploadModalClicked}\r\n          setUploadModalClicked={setUploadModalClicked}\r\n          setImageIndex={null}\r\n          uploadModalOpen={uploadModalOpen}\r\n          setuploadModalOpen={setuploadModalOpen}\r\n          postId={null}\r\n          clipboardFile={clipboardFile}\r\n        />\r\n      )}\r\n      {!user && loginModalOpen && (\r\n        <LoginForm\r\n          loginModalOpen={loginModalOpen}\r\n          setloginModalOpen={setloginModalOpen}\r\n        />\r\n      )}\r\n      {showHashModalOpen && (\r\n        <Modal\r\n          open={true}\r\n          onClose={closehashtagsModal}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <Box component=\"form\" noValidate autoComplete=\"off\" sx={modalstyle}>\r\n            <div\r\n              className=\"hashlistdiv\"\r\n              style={{ height: \"300px\", overflow: \"overlay\" }}\r\n            >\r\n              {hashtags &&\r\n                hashtags.map((hashtag: any, index: any) => (\r\n                  <li\r\n                    id=\"hashlist\"\r\n                    key={hashtag.id}\r\n                    style={{ listStyle: \"none\", marginBottom: \"5px\" }}\r\n                  >\r\n                    {\" \"}\r\n                    #{hashtag.name}\r\n                  </li>\r\n                ))}\r\n            </div>\r\n\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              size=\"large\"\r\n              onClick={closehashtagsModal}\r\n            >\r\n              확인\r\n            </Button>\r\n            {/* </form> */}\r\n          </Box>\r\n          {/* <Button onClick={closeModal}>닫기</Button> */}\r\n        </Modal>\r\n      )}\r\n\r\n      <AppBar\r\n        position=\"static\"\r\n        style={{ backgroundColor: \"#FFF\", color: \"#000\" }}\r\n      >\r\n        <Toolbar>\r\n          <Button\r\n            variant=\"contained\"\r\n            sx={{\r\n              // height: \"60%\",\r\n              whiteSpace: \"nowrap\",\r\n              marginRight: \"5px\",\r\n              fontWeight: \"bold\",\r\n              display: \"inline-block\",\r\n            }}\r\n            size=\"small\"\r\n            onClick={getHashtags}\r\n          >\r\n            #목록\r\n          </Button>\r\n          <Typography\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ display: { xs: \"none\", sm: \"block\" } }}\r\n          ></Typography>\r\n\r\n          <Box sx={{ flexGrow: 1, display: { xs: \"none\", md: \"flex\" } }} />\r\n\r\n          <Searchbar setIsUserpage={setIsUserpage}/>\r\n\r\n          <Box sx={{ flexGrow: 1, display: { xs: \"none\", md: \"flex\" } }} />\r\n\r\n          <Box sx={{ display: { xs: \"none\", md: \"flex\" } }}>\r\n            <>\r\n              <IconButton\r\n                size=\"large\"\r\n                edge=\"end\"\r\n                sx={{ marginRight: \"10px\" }}\r\n                aria-label=\"account of current user\"\r\n                aria-haspopup=\"false\"\r\n                color=\"primary\"\r\n                onClick={uploadClick}\r\n              >\r\n                <AddIcon />\r\n              </IconButton>\r\n            </>\r\n            {!user ? (\r\n              <>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  sx={{\r\n                    // height: \"60%\",\r\n                    width: \"40%\",\r\n                    marginRight: \"5px\",\r\n                    fontWeight: \"bold\",\r\n                    display: \"inline-block\",\r\n                  }}\r\n                  size=\"small\"\r\n                  onClick={showLoginModal}\r\n                >\r\n                  로그인\r\n                </Button>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  sx={{\r\n                    // height: \"60%\",\r\n                    width: \"40%\",\r\n                    fontWeight: \"bold\",\r\n                    display: \"inline-block\",\r\n                  }}\r\n                  onClick={showModal}\r\n                  size=\"small\"\r\n                >\r\n                  가입\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <LoadingButton\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  sx={{\r\n                    // height: \"60%\",\r\n                    width: \"100%\",\r\n                    marginRight: \"5px\",\r\n                    fontWeight: \"bold\",\r\n                    display: \"inline-block\",\r\n                    whiteSpace: \"nowrap\",\r\n                  }}\r\n                  size=\"small\"\r\n                  onClick={Logout}\r\n                  loading={logOutLoading}\r\n                >\r\n                  로그아웃\r\n                </LoadingButton>\r\n                <IconButton\r\n                  size=\"large\"\r\n                  edge=\"end\"\r\n                  aria-label=\"account of current user\"\r\n                  aria-controls={menuId}\r\n                  aria-haspopup=\"true\"\r\n                  color=\"primary\"\r\n                  onClick={profileClick}\r\n                >\r\n                  <AccountCircle />\r\n                </IconButton>\r\n              </>\r\n            )}\r\n          </Box>\r\n          <Box sx={{ display: { xs: \"flex\", md: \"none\" }, float: \"right\" }}>\r\n            <IconButton\r\n              size=\"large\"\r\n              aria-label=\"show more\"\r\n              aria-controls={mobileMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleMobileMenuOpen}\r\n              color=\"primary\"\r\n            >\r\n              <MoreIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {renderMobileMenu}\r\n      {renderMenu}\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\NoticeModal.tsx",[],[],"C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\ResponsiveGrid.tsx",[],[],"C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\Searchbar.tsx",["93"],[],"import * as React from \"react\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport useInput from \"../hooks/useInput\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { HASHTAG_SEARCH_REQUEST, loadPost } from \"@/reducers/post\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {useEffect, useRef} from 'react';\r\n\r\ntype SearchbarProps = {\r\n  setIsUserpage:any\r\n};\r\n\r\nexport default function Searchbar({setIsUserpage}: SearchbarProps) {\r\n  const [value, onChangeValue, setValue] = useInput(\"\");\r\n  const dispatch = useDispatch();\r\n  const searchBar = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (searchBar.current) {\r\n      searchBar.current.focus();\r\n    }\r\n  }, []);\r\n\r\n\r\n  const TagSearch = React.useCallback(\r\n    (e: any) => {\r\n      // e.preventDeafult();\r\n      // e.stopPropagation();\r\n      if (value == \"\") {\r\n        dispatch(loadPost())\r\n      } else if (value.split(\"#\").length < 2) {\r\n        alert(\"태그 앞에 #를 붙여주세요\");\r\n      } else {\r\n        let upperCaseValue = value.toUpperCase();\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        dispatch({\r\n          type: HASHTAG_SEARCH_REQUEST,\r\n          data: {\r\n            hashtags: \"#\" + upperCaseValue,\r\n          }\r\n        })\r\n        setValue(\"\")\r\n        setIsUserpage(false)\r\n      }\r\n    },\r\n    [dispatch, value]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <form\r\n        onSubmit={TagSearch}\r\n        style={{ width: \"70%\", flex: \"auto\", marginLeft: \"15%\" }}\r\n      >\r\n        <IconButton\r\n          type=\"submit\"\r\n          aria-label=\"search\"\r\n          sx={{ display: { xs: \"none\", md: \"inline-block\" } }}\r\n        >\r\n          <SearchIcon style={{ fill: \"#9A9A9A\" }} />\r\n        </IconButton>\r\n        <TextField\r\n          id=\"search-bar\"\r\n          className=\"text\"\r\n          sx={{ display: \"inline-block\", width: \"80%\", '> div' : {width :\"100%\"}}}\r\n          value={value}\r\n          onChange={onChangeValue}\r\n          label=\"#상의 #검정\"\r\n          variant=\"outlined\"\r\n          placeholder=\"Search...\"\r\n          size=\"small\"\r\n          inputRef={searchBar}\r\n        />\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\signup.tsx",["94","95"],[],"C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\upload.tsx",["96","97","98","99","100","101","102","103"],[],"C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\UserPage.tsx",["104","105","106","107"],[],"import * as React from \"react\";\r\nimport useInput from \"../hooks/useInput\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport {useEffect, useState, useRef, useCallback} from 'react';\r\nimport {\r\n  GET_USER_LIKED_POST_REQUEST,\r\n  GET_USER_POST_REQUEST, POST_SORT_REQUEST, TOGGLE_SCROLL_REQUEST,\r\n} from \"@/reducers/post\";\r\ntype UserPageProps = {};\r\n\r\nexport default function UserPage({}: UserPageProps) {\r\n  const {postArray} = useSelector((state: any) => state.post);\r\n  const { user } = useSelector((state: any) => state.user);\r\n  const [isLiked, setIsLiked] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const loadUserPost = useCallback(() => {\r\n    dispatch({\r\n      type: GET_USER_POST_REQUEST,\r\n      data: null,\r\n    });\r\n    setIsLiked(false);\r\n  }, []);\r\n\r\n  const likedSorting = useCallback(() => {\r\n    var sortedArray = [...postArray];\r\n    sortedArray.sort(function(a:any,b:any){\r\n      return  b.Likers.length- a.Likers.length \r\n    })\r\n    dispatch({\r\n      type: POST_SORT_REQUEST,\r\n      data: sortedArray,\r\n    });\r\n  }, [postArray, user]);\r\n  \r\n  const dateSorting = useCallback(() => {\r\n    var sortedArray = [...postArray];\r\n    sortedArray.sort(function(a:any,b:any){\r\n      return a.createdAt - b.createdAt\r\n    })\r\n    dispatch({\r\n      type: POST_SORT_REQUEST,\r\n      data: sortedArray,\r\n    });\r\n  }, [postArray, user]);\r\n\r\n\r\n  \r\n  const loadUserLikedPost = useCallback(() => {\r\n    setIsLiked(true);\r\n\r\n    dispatch({\r\n      type:GET_USER_LIKED_POST_REQUEST\r\n    })\r\n\r\n  }, [postArray, user]);\r\n\r\n  useEffect(()=>{\r\n\r\n    console.log(postArray)\r\n  },[postArray])\r\n\r\n  return (\r\n    <>\r\n    <Stack spacing={2} direction=\"row\">\r\n        <Button disabled style={{marginTop:\"-20px\", fontWeight: 900}}>{user.data.name}님의 페이지</Button>\r\n    </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <Button variant=\"text\" style={{fontWeight: 900}} onClick={loadUserPost}> 작성한 게시물</Button>\r\n        <Button variant=\"text\" style={{fontWeight: 900}} onClick={loadUserLikedPost}> 좋아요 누른 게시물</Button>\r\n        <Button variant=\"outlined\" size=\"small\" style={{position:\"absolute\", right:\"18%\",fontWeight: 900}} onClick={dateSorting}> 최신 순</Button>\r\n        <Button variant=\"outlined\" size=\"small\" style={{position:\"absolute\", right:\"12%\", fontWeight: 900}}onClick={likedSorting}> 좋아요 순 </Button>\r\n      </Stack>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\Signup.tsx",["108","109"],[],"C:\\Users\\User\\Fashion_ref\\fashion_ref\\components\\Upload.tsx",["110","111","112","113","114","115","116","117"],[],{"ruleId":"118","severity":1,"message":"119","line":91,"column":6,"nodeType":"120","endLine":91,"endColumn":16,"suggestions":"121"},{"ruleId":"118","severity":1,"message":"122","line":120,"column":6,"nodeType":"120","endLine":120,"endColumn":28,"suggestions":"123"},{"ruleId":"118","severity":1,"message":"124","line":70,"column":5,"nodeType":"120","endLine":70,"endColumn":16,"suggestions":"125"},{"ruleId":"118","severity":1,"message":"122","line":113,"column":6,"nodeType":"120","endLine":113,"endColumn":8,"suggestions":"126"},{"ruleId":"118","severity":1,"message":"127","line":155,"column":5,"nodeType":"120","endLine":155,"endColumn":11,"suggestions":"128"},{"ruleId":"118","severity":1,"message":"129","line":49,"column":5,"nodeType":"120","endLine":49,"endColumn":22,"suggestions":"130"},{"ruleId":"118","severity":1,"message":"122","line":97,"column":7,"nodeType":"120","endLine":97,"endColumn":45,"suggestions":"131"},{"ruleId":"118","severity":1,"message":"132","line":109,"column":7,"nodeType":"120","endLine":109,"endColumn":19,"suggestions":"133"},{"ruleId":"118","severity":1,"message":"122","line":125,"column":6,"nodeType":"120","endLine":125,"endColumn":13,"suggestions":"134"},{"ruleId":"118","severity":1,"message":"135","line":218,"column":6,"nodeType":"120","endLine":218,"endColumn":76,"suggestions":"136"},{"ruleId":"118","severity":1,"message":"135","line":231,"column":6,"nodeType":"120","endLine":231,"endColumn":12,"suggestions":"137"},{"ruleId":"118","severity":1,"message":"138","line":254,"column":5,"nodeType":"120","endLine":254,"endColumn":11,"suggestions":"139"},{"ruleId":"118","severity":1,"message":"140","line":334,"column":5,"nodeType":"120","endLine":347,"endColumn":6,"suggestions":"141"},{"ruleId":"118","severity":1,"message":"142","line":433,"column":6,"nodeType":"120","endLine":433,"endColumn":25,"suggestions":"143"},{"ruleId":"118","severity":1,"message":"138","line":443,"column":5,"nodeType":"120","endLine":443,"endColumn":11,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":660,"column":34,"nodeType":"147","endLine":660,"endColumn":72},{"ruleId":"118","severity":1,"message":"122","line":26,"column":6,"nodeType":"120","endLine":26,"endColumn":8,"suggestions":"148"},{"ruleId":"118","severity":1,"message":"122","line":37,"column":6,"nodeType":"120","endLine":37,"endColumn":23,"suggestions":"149"},{"ruleId":"118","severity":1,"message":"122","line":48,"column":6,"nodeType":"120","endLine":48,"endColumn":23,"suggestions":"150"},{"ruleId":"118","severity":1,"message":"122","line":59,"column":6,"nodeType":"120","endLine":59,"endColumn":23,"suggestions":"151"},{"ruleId":"118","severity":1,"message":"122","line":97,"column":7,"nodeType":"120","endLine":97,"endColumn":45,"suggestions":"152"},{"ruleId":"118","severity":1,"message":"132","line":109,"column":7,"nodeType":"120","endLine":109,"endColumn":19,"suggestions":"153"},{"ruleId":"118","severity":1,"message":"122","line":125,"column":6,"nodeType":"120","endLine":125,"endColumn":13,"suggestions":"154"},{"ruleId":"118","severity":1,"message":"135","line":218,"column":6,"nodeType":"120","endLine":218,"endColumn":76,"suggestions":"155"},{"ruleId":"118","severity":1,"message":"135","line":231,"column":6,"nodeType":"120","endLine":231,"endColumn":12,"suggestions":"156"},{"ruleId":"118","severity":1,"message":"138","line":254,"column":5,"nodeType":"120","endLine":254,"endColumn":11,"suggestions":"157"},{"ruleId":"118","severity":1,"message":"140","line":334,"column":5,"nodeType":"120","endLine":347,"endColumn":6,"suggestions":"158"},{"ruleId":"118","severity":1,"message":"142","line":433,"column":6,"nodeType":"120","endLine":433,"endColumn":25,"suggestions":"159"},{"ruleId":"118","severity":1,"message":"138","line":443,"column":5,"nodeType":"120","endLine":443,"endColumn":11,"suggestions":"160"},{"ruleId":"145","severity":1,"message":"146","line":660,"column":34,"nodeType":"147","endLine":660,"endColumn":72},"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'postArray'. Either include it or remove the dependency array.","ArrayExpression",["161"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["162"],"React Hook useEffect has missing dependencies: 'dispatch', 'isInitialOpen', and 'setloginModalOpen'. Either include them or remove the dependency array. If 'setloginModalOpen' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["163"],["164"],"React Hook useCallback has missing dependencies: 'dispatch' and 'setIsUserpage'. Either include them or remove the dependency array. If 'setIsUserpage' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["165"],"React Hook React.useCallback has missing dependencies: 'setIsUserpage' and 'setValue'. Either include them or remove the dependency array. If 'setIsUserpage' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["166"],["167"],"React Hook useEffect has missing dependencies: 'dispatch', 'isInitialOpen', and 'setIsModalOpen'. Either include them or remove the dependency array. If 'setIsModalOpen' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["168"],["169"],"React Hook useEffect has a missing dependency: 'handfiles'. Either include it or remove the dependency array.",["170"],["171"],"React Hook useCallback has a missing dependency: 'handfiles'. Either include it or remove the dependency array.",["172"],"React Hook useCallback has a missing dependency: 'userName'. Either include it or remove the dependency array.",["173"],"React Hook useEffect has missing dependencies: 'photos', 'post', 'props.postId', 'setBrand', 'setLink', 'setReason', and 'setText'. Either include them or remove the dependency array. You can also do a functional update 'setPost(p => ...)' if you only need 'post' in the 'setPost' call.",["174"],["175"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Use `<Image />` from `next/image` instead to utilize Image Optimization. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement",["176"],["177"],["178"],["179"],["180"],["181"],["182"],["183"],["184"],["185"],["186"],["187"],["188"],{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"211","fix":"217"},{"desc":"195","fix":"218"},{"desc":"189","fix":"219"},{"desc":"189","fix":"220"},{"desc":"195","fix":"221"},{"desc":"201","fix":"222"},{"desc":"203","fix":"223"},{"desc":"205","fix":"224"},{"desc":"207","fix":"225"},{"desc":"209","fix":"226"},{"desc":"211","fix":"227"},{"desc":"213","fix":"228"},{"desc":"215","fix":"229"},{"desc":"211","fix":"230"},"Update the dependencies array to be: [dispatch, postArray]",{"range":"231","text":"232"},"Update the dependencies array to be: [user, like, dispatch, props.id]",{"range":"233","text":"234"},"Update the dependencies array to be: [dispatch, isInitialOpen, logInDone, setloginModalOpen]",{"range":"235","text":"236"},"Update the dependencies array to be: [dispatch]",{"range":"237","text":"238"},"Update the dependencies array to be: [dispatch, setIsUserpage, user]",{"range":"239","text":"240"},"Update the dependencies array to be: [dispatch, setIsUserpage, setValue, value]",{"range":"241","text":"242"},"Update the dependencies array to be: [password, passwordCheck, email, name, dispatch]",{"range":"243","text":"244"},"Update the dependencies array to be: [dispatch, isInitialOpen, setIsModalOpen, signUpDone]",{"range":"245","text":"246"},"Update the dependencies array to be: [dispatch, props]",{"range":"247","text":"248"},"Update the dependencies array to be: [handfiles, props.clipboardFile, props.uploadModalClicked, props.uploadModalOpen]",{"range":"249","text":"250"},"Update the dependencies array to be: [handfiles, post]",{"range":"251","text":"252"},"Update the dependencies array to be: [handfiles]",{"range":"253","text":"254"},"Update the dependencies array to be: [brand, isEdit, post.photos.length, imageFile, props.postId, link, category, season, text, reason, userName, dispatch, user.id, user.userName]",{"range":"255","text":"256"},"Update the dependencies array to be: [isEdit, photos, post, postArray, props.postId, setBrand, setLink, setReason, setText]",{"range":"257","text":"258"},{"range":"259","text":"254"},{"range":"260","text":"238"},{"range":"261","text":"232"},{"range":"262","text":"232"},{"range":"263","text":"238"},{"range":"264","text":"244"},{"range":"265","text":"246"},{"range":"266","text":"248"},{"range":"267","text":"250"},{"range":"268","text":"252"},{"range":"269","text":"254"},{"range":"270","text":"256"},{"range":"271","text":"258"},{"range":"272","text":"254"},[3012,3022],"[dispatch, postArray]",[3657,3679],"[user, like, dispatch, props.id]",[2070,2081],"[dispatch, isInitialOpen, logInDone, setloginModalOpen]",[3852,3854],"[dispatch]",[4761,4767],"[dispatch, setIsUserpage, user]",[1402,1419],"[dispatch, setIsUserpage, setValue, value]",[2844,2882],"[password, passwordCheck, email, name, dispatch]",[3172,3184],"[dispatch, isInitialOpen, setIsModalOpen, signUpDone]",[3931,3938],"[dispatch, props]",[6770,6840],"[handfiles, props.clipboardFile, props.uploadModalClicked, props.uploadModalOpen]",[7169,7175],"[handfiles, post]",[7704,7710],"[handfiles]",[10095,10294],"[brand, isEdit, post.photos.length, imageFile, props.postId, link, category, season, text, reason, userName, dispatch, user.id, user.userName]",[12502,12521],"[isEdit, photos, post, postArray, props.postId, setBrand, setLink, setReason, setText]",[12732,12738],[871,873],[1152,1169],[1440,1457],[1614,1631],[2844,2882],[3172,3184],[3931,3938],[6770,6840],[7169,7175],[7704,7710],[10095,10294],[12502,12521],[12732,12738]]