import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import Navbar from "../Components/Navbar";
import ResponsiveGrid from "../Components/ResponsiveGrid";
import axios, { AxiosHeaders } from "axios";
import { useSelector } from "react-redux";
import {
  initialState as postinitialState,
  LOAD_POST_REQUEST,
  RELOAD_POST_REQUEST,
  GET_USER_POST_REQUEST,
} from "@/reducers/post";
import { initialState as userinitialState } from "@/reducers/user";
import React, { useCallback, useState, useEffect, useMemo } from "react";
import { loadPost } from "@/reducers/post";
import { loadUser } from "@/reducers/user";
import { useDispatch } from "react-redux";
import wrapper from "@/store/configureStore";
import { END } from "redux-saga";
import userpage from "./userpage";
import NoticeModal from "@/Components/NoticeModal";

export const getServerSideProps = wrapper.getServerSideProps(
  async (context) => {
    const cookie: any = context.req ? context.req.headers.cookie : "";
    axios.defaults.headers.Cookie = "";
    if (context.req && cookie) {
      axios.defaults.headers.Cookie = cookie;
    }
    context.store.dispatch(loadPost());
    context.store.dispatch(loadUser());
    context.store.dispatch(END);
    await context.store.sagaTask.toPromise();
  }
);

export default function Home() {
  // const [isLoggedIn, setIsLoggedIn] = React.useState(false);

  const { user } = useSelector((state: any) => state.user);
  const { loadPostLoading } = useSelector((state: any) => state.post);
  const { onInfiniteScroll } = useSelector((state: any) => state.post);
  const { hasMorePost } = useSelector((state: any) => state.post);
  const { postArray } = useSelector((state: any) => state.post);
  const dispatch = useDispatch();
  const [isUserpage, setIsUserpage] = useState(false);

  useEffect(() => {
    function onScroll() {
      if (
        window.scrollY + document.documentElement.clientHeight >
        document.documentElement.scrollHeight - 350
      ) {
        if (hasMorePost && !loadPostLoading && onInfiniteScroll) {
          const lastId = postArray[postArray.length - 1].id;
          dispatch({
            type: LOAD_POST_REQUEST,
            data: lastId,
          });
        }
      }
    }
    window.addEventListener("scroll", onScroll);
    return () => {
      window.removeEventListener("scroll", onScroll);
    };
  }, [hasMorePost, loadPostLoading, dispatch, postArray, onInfiniteScroll]);

  const loadPosts = useCallback(() => {
    dispatch({
      type: RELOAD_POST_REQUEST,
    });
    dispatch(loadPost());
  }, [dispatch]);

  const loadUserPost = useCallback(() => {
    dispatch({
      type: GET_USER_POST_REQUEST,
      data: null,
    });
  }, []);

  return (
    <>
      <Head>
        <title>Crump REF</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <NoticeModal />
      <div style={{ margin: "auto", width: "80%" }}>
        <a onClick={loadPosts}>
          <h1 id="title" style={{ cursor: "pointer" }}>
            CRUMP REFERENCE
          </h1>
        </a>
        <div style={{ marginBottom: "40px" }}>
          <Navbar setIsUserpage={setIsUserpage} />
        </div>
        <div style={{marginBottom :"10px"}}>
          {isUserpage && (
            <button onClick={loadUserPost}> 내가 작성한 순 </button>
          )}
        </div>
        <ResponsiveGrid />
        {/* <div>
          <Stack spacing={2} sx={{alignItems:"center", marginTop:"30px", marginBottom:"50px"}}>
            <Pagination page={page} count={count} color="primary" onChange={handleChange}/>
          </Stack>
        </div> */}
        {loadPostLoading && (
          <div id="bottomloading">
            <span style={{ fontSize: "240%" }}> 로딩중...</span>
          </div>
        )}
      </div>
    </>
  );
}
